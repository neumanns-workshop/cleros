name: Build and Deploy

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout SORTES repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          cd web
          npm install

      - name: Build
        run: |
          cd web
          # Set the correct PUBLIC_URL for GitHub Pages
          REACT_APP_PUBLIC_URL="/sortes-app" CI=false SKIP_PREFLIGHT_CHECK=true DISABLE_ESLINT_PLUGIN=true npm run build
          # List contents to verify build
          echo "Build output files:"
          ls -la build/
          echo "Build static files:"
          ls -la build/static

      - name: Checkout main repository
        uses: actions/checkout@v3
        with:
          repository: neumanns-workshop/neumanns-workshop.github.io
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          path: main-repo

      - name: Copy build files to main repository
        run: |
          # Make sortes-app directory and copy build files there (keeping existing structure)
          mkdir -p main-repo/sortes-app
          echo "Copying build files to sortes-app directory"
          cp -R web/build/* main-repo/sortes-app/
          
          # Create data directories in the sortes-app folder
          mkdir -p main-repo/sortes-app/data/enriched/deities
          mkdir -p main-repo/sortes-app/data/enriched/embeddings
          mkdir -p main-repo/sortes-app/data/base
          
          # Check content of sortes-app directory
          echo "Content of sortes-app directory:"
          ls -la main-repo/sortes-app/
          echo "Content of static directory:"
          ls -la main-repo/sortes-app/static 2>/dev/null || echo "No static directory found"
          
          # Copy data from data/ to web deployment
          if [ -d "data/enriched" ]; then
            echo "Copying data files from repository..."
            
            # Copy deity classifications
            cp -R data/enriched/deities/* main-repo/sortes-app/data/enriched/deities/
            echo "Deity files copied"
            
            # Special handling for the large embedding file
            echo "Checking embeddings file size..."
            ls -lah data/enriched/embeddings/sentence_embeddings.json || echo "Embedding file not found!"
            
            # Copy embeddings - one by one to verify
            echo "Copying sentence embeddings file..."
            cp data/enriched/embeddings/sentence_embeddings.json main-repo/sortes-app/data/enriched/embeddings/ || echo "Failed to copy sentence_embeddings.json"
            echo "Copying embeddings metadata file..."
            cp data/enriched/embeddings/embeddings_metadata.json main-repo/sortes-app/data/enriched/embeddings/ || echo "Failed to copy embeddings_metadata.json"
                                        
            echo "Verifying copied embedding files:"
            ls -lah main-repo/sortes-app/data/enriched/embeddings/ || echo "No embeddings directory found!"
            
            # Copy base hymn data files
            if [ -d "data/base" ]; then
              echo "Copying base hymn data files..."
              cp -R data/base/* main-repo/sortes-app/data/base/
              echo "Base hymn files copied. Found:"
              ls -la main-repo/sortes-app/data/base/ || echo "No base hymn files found!"
            fi
          else
            echo "Warning: data/enriched directory not found"
          fi
          
          # Also create a top-level data directory that links to the same data for fallback support
          mkdir -p main-repo/data/enriched/deities
          mkdir -p main-repo/data/enriched/embeddings
          mkdir -p main-repo/data/base
          
          # Copy data to the root data directory too
          if [ -d "data/enriched/deities" ]; then
            cp -R data/enriched/deities/* main-repo/data/enriched/deities/
          fi
          
          if [ -f "data/enriched/embeddings/sentence_embeddings.json" ]; then
            cp data/enriched/embeddings/sentence_embeddings.json main-repo/data/enriched/embeddings/
          fi
          
          if [ -f "data/enriched/embeddings/embeddings_metadata.json" ]; then
            cp data/enriched/embeddings/embeddings_metadata.json main-repo/data/enriched/embeddings/
          fi
          
          # Copy base hymn data files to root data directory too
          if [ -d "data/base" ]; then
            cp -R data/base/* main-repo/data/base/
          fi
          
          # Create a top-level data index redirect as fallback
          cat > main-repo/data/index.html << 'EOL'
          <!DOCTYPE html>
          <html>
          <head>
            <meta http-equiv="refresh" content="0; url=/sortes-app/data/" />
            <title>Redirecting to data</title>
          </head>
          <body>
            <p>Redirecting to data files...</p>
          </body>
          </html>
          EOL
          
          # Create sortes directory with redirect to sortes-app
          mkdir -p main-repo/sortes
          cat > main-repo/sortes/index.html << 'EOL'
          <!DOCTYPE html>
          <html>
          <head>
            <meta http-equiv="refresh" content="0; url=/sortes-app/" />
            <title>Redirecting to SORTES</title>
          </head>
          <body>
            <p>Redirecting to SORTES application...</p>
            <p><a href="/sortes-app/">Click here if you are not redirected automatically</a></p>
          </body>
          </html>
          EOL
          
          # Create a root redirect to sortes-app
          cat > main-repo/index.html << 'EOL'
          <!DOCTYPE html>
          <html>
          <head>
            <meta http-equiv="refresh" content="0; url=/sortes-app/" />
            <title>Redirecting to SORTES</title>
          </head>
          <body>
            <p>Redirecting to SORTES application...</p>
            <p><a href="/sortes-app/">Click here if you are not redirected automatically</a></p>
          </body>
          </html>
          EOL
          
          # Ensure .nojekyll exists to prevent Jekyll processing
          touch main-repo/.nojekyll
          
          # List directories to verify structure
          echo "Directory structure:"
          ls -la main-repo/
          ls -la main-repo/sortes/
          ls -la main-repo/sortes-app/
          ls -la main-repo/sortes-app/data/ || echo "No data directory found"
          ls -la main-repo/data/ || echo "No root data directory found"
          
          # Specifically check embedding files
          echo "Checking final embedding files:"
          ls -lah main-repo/sortes-app/data/enriched/embeddings/ || echo "No embeddings directory found!"
          ls -lah main-repo/data/enriched/embeddings/ || echo "No root embeddings directory found!"

      - name: Configure Git
        run: |
          cd main-repo
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"

      - name: Commit and push changes to main repository
        run: |
          cd main-repo
          git add sortes sortes-app .nojekyll data index.html
          git commit -m "Update SORTES app with new embeddings architecture (triggered by ${{ github.event.head_commit.message }})" || echo "No changes to commit"
          git push origin main 