name: Build and Deploy

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout SORTES repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          cd web
          npm install

      - name: Build
        run: |
          cd web
          # Set the correct PUBLIC_URL for GitHub Pages
          REACT_APP_PUBLIC_URL="/sortes" CI=false SKIP_PREFLIGHT_CHECK=true DISABLE_ESLINT_PLUGIN=true npm run build
          # List contents to verify build
          echo "Build output files:"
          ls -la build/
          echo "Build static files:"
          ls -la build/static

      - name: Verify embedding dimension
        run: |
          # Check the embedding dimension in the metadata file to ensure it's 512
          if [ -f "web/public/data/enriched/embeddings/embeddings_metadata.json" ]; then
            echo "Verifying embedding dimension from metadata..."
            DIMENSION=$(grep -o '"embedding_dimension":[^,]*' web/public/data/enriched/embeddings/embeddings_metadata.json | cut -d ':' -f2)
            echo "Found embedding dimension: $DIMENSION"
            
            if [ "$DIMENSION" -eq 512 ]; then
              echo "✅ Embedding dimension is correct (512)"
            else
              echo "⚠️ Warning: Embedding dimension is $DIMENSION, expected 512"
            fi
          else
            echo "Warning: embeddings_metadata.json not found in web/public/"
          fi

      - name: Checkout main repository
        uses: actions/checkout@v3
        with:
          repository: neumanns-workshop/neumanns-workshop.github.io
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          path: main-repo

      - name: Copy build files to main repository
        run: |
          # Make sortes directory and copy build files there (keeping existing structure)
          mkdir -p main-repo/sortes
          echo "Copying build files to sortes directory"
          cp -R web/build/* main-repo/sortes/
          
          # IMPORTANT: Fix for GitHub Pages showing README instead of app
          # Create .nojekyll in every relevant directory
          touch main-repo/.nojekyll
          touch main-repo/sortes/.nojekyll
          
          # Create an explicit index.html in sortes directory if it doesn't exist
          if [ ! -f "main-repo/sortes/index.html" ]; then
            echo "WARNING: index.html not found in build output. Creating from app files."
            cp web/build/index.html main-repo/sortes/index.html
          fi
          
          # Force GitHub Pages to use index.html instead of README.md
          if [ -f "main-repo/sortes/README.md" ]; then
            echo "Removing README.md from sortes directory to prevent GitHub Pages from using it"
            rm main-repo/sortes/README.md
          fi
          
          # Make sure the root index.html doesn't redirect to sortes
          if [ -f "main-repo/index.html" ]; then
            # Check if it's a redirect file
            if grep -q "sortes" main-repo/index.html; then
              echo "Found root redirect to sortes, removing it..."
              rm main-repo/index.html
            fi
          fi
          
          # Check for and remove any other redirects to /sortes/ from homepage
          find main-repo -type f -name "*.html" -not -path "*/sortes/*" -not -path "*/sortes-app/*" -exec grep -l "sortes" {} \; | while read file; do
            echo "Checking $file for redirects..."
            if grep -q "refresh.*sortes" "$file"; then
              echo "Found redirect to sortes in $file, removing it..."
              rm "$file"
            fi
          done
          
          # Create data directories in the sortes folder if they don't exist in build
          if [ ! -d "main-repo/sortes/data/enriched/deities" ]; then
            mkdir -p main-repo/sortes/data/enriched/deities
          fi
          
          if [ ! -d "main-repo/sortes/data/enriched/embeddings" ]; then
            mkdir -p main-repo/sortes/data/enriched/embeddings
          fi
          
          if [ ! -d "main-repo/sortes/data/base" ]; then
            mkdir -p main-repo/sortes/data/base
          fi
          
          # Check content of sortes directory
          echo "Content of sortes directory:"
          ls -la main-repo/sortes/
          echo "Content of static directory:"
          ls -la main-repo/sortes/static 2>/dev/null || echo "No static directory found"
          
          # Special handling for embeddings - ALWAYS use the web/public version
          echo "Using web/public embeddings..."
          
          if [ -f "web/public/data/enriched/embeddings/sentence_embeddings.json" ]; then
            echo "Copying sentence_embeddings.json from web/public..."
            cp web/public/data/enriched/embeddings/sentence_embeddings.json main-repo/sortes/data/enriched/embeddings/
            
            # Also ensure the same file is in the root data directory for fallback
            mkdir -p main-repo/data/enriched/embeddings
            cp web/public/data/enriched/embeddings/sentence_embeddings.json main-repo/data/enriched/embeddings/
            
            echo "Verifying file size for copied embeddings:"
            ls -lah main-repo/sortes/data/enriched/embeddings/sentence_embeddings.json
            ls -lah main-repo/data/enriched/embeddings/sentence_embeddings.json
          else
            echo "⚠️ Warning: sentence_embeddings.json not found in web/public!"
          fi
          
          # Copy metadata file
          if [ -f "web/public/data/enriched/embeddings/embeddings_metadata.json" ]; then
            echo "Copying embeddings_metadata.json from web/public..."
            cp web/public/data/enriched/embeddings/embeddings_metadata.json main-repo/sortes/data/enriched/embeddings/
            cp web/public/data/enriched/embeddings/embeddings_metadata.json main-repo/data/enriched/embeddings/
          else
            echo "⚠️ Warning: embeddings_metadata.json not found in web/public!"
          fi
          
          # Copy deity classifications if they exist
          if [ -d "web/public/data/enriched/deities" ]; then
            echo "Copying deity files from web/public..."
            cp -R web/public/data/enriched/deities/* main-repo/sortes/data/enriched/deities/
            
            # Also copy to root data directory
            mkdir -p main-repo/data/enriched/deities
            cp -R web/public/data/enriched/deities/* main-repo/data/enriched/deities/
          fi
          
          # Copy base hymn data files if they exist
          if [ -d "web/public/data/base" ]; then
            echo "Copying base hymn data files from web/public..."
            cp -R web/public/data/base/* main-repo/sortes/data/base/
            
            # Also copy to root data directory
            mkdir -p main-repo/data/base
            cp -R web/public/data/base/* main-repo/data/base/
          fi
          
          # Create a top-level data index redirect as fallback
          cat > main-repo/data/index.html << 'EOL'
          <!DOCTYPE html>
          <html>
          <head>
            <meta http-equiv="refresh" content="0; url=/sortes/data/" />
            <title>Redirecting to data</title>
          </head>
          <body>
            <p>Redirecting to data files...</p>
          </body>
          </html>
          EOL
          
          # Remove old sortes-app directory redirect if it exists
          if [ -d "main-repo/sortes-app" ]; then
            echo "Creating redirect from old sortes-app path..."
            mkdir -p main-repo/sortes-app
            cat > main-repo/sortes-app/index.html << 'EOL'
          <!DOCTYPE html>
          <html>
          <head>
            <meta http-equiv="refresh" content="0; url=/sortes/" />
            <title>Redirecting to SORTES</title>
          </head>
          <body>
            <p>Redirecting to SORTES application...</p>
            <p><a href="/sortes/">Click here if you are not redirected automatically</a></p>
          </body>
          </html>
          EOL
          fi
          
          # No longer needed to create sortes directory with redirect as we're deploying directly there
          
          # Removed root redirect to allow personal website to function normally
          
          # List directories to verify structure
          echo "Directory structure:"
          ls -la main-repo/
          ls -la main-repo/sortes/
          ls -la main-repo/sortes/data/ || echo "No data directory found"
          ls -la main-repo/data/ || echo "No root data directory found"
          
          # Specifically check embedding files
          echo "Checking final embedding files:"
          ls -lah main-repo/sortes/data/enriched/embeddings/ || echo "No embeddings directory found!"
          ls -lah main-repo/data/enriched/embeddings/ || echo "No root embeddings directory found!"

      - name: Configure Git
        run: |
          cd main-repo
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"

      - name: Commit and push changes to main repository
        run: |
          cd main-repo
          git add sortes sortes-app .nojekyll data
          git commit -m "Update SORTES app with new path /sortes/ (triggered by ${{ github.event.head_commit.message }})" || echo "No changes to commit"
          git push origin main 