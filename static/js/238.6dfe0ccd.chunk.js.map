{"version":3,"file":"static/js/238.6dfe0ccd.chunk.js","mappings":"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","sources":["../node_modules/seedrandom/seedrandom.js","../node_modules/seedrandom/index.js","../node_modules/seedrandom/lib/tychei.js","../node_modules/seedrandom/lib/xor4096.js","../node_modules/seedrandom/lib/xor128.js","../node_modules/long/src/long.js","../node_modules/seedrandom/lib/alea.js","../node_modules/seedrandom/lib/xorwow.js","../node_modules/seedrandom/lib/xorshift7.js"],"sourcesContent":["/*\nCopyright 2019 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (global, pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\n\nvar width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; }\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); }\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n};\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif ((typeof module) == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  try {\n    nodecrypto = require('crypto');\n  } catch (ex) {}\n} else if ((typeof define) == 'function' && define.amd) {\n  define(function() { return seedrandom; });\n} else {\n  // When included as a plain script, set up Math.seedrandom global.\n  math['seed' + rngname] = seedrandom;\n}\n\n\n// End anonymous scope, and pass initial values.\n})(\n  // global: `self` in browsers (including strict mode and web workers),\n  // otherwise `this` in Node and other environments\n  (typeof self !== 'undefined') ? self : this,\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n","// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n","// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n};\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n};\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  this,                                     // window object or global\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n","// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n(function(global, module, define) {\n\nfunction Alea(seed) {\n  var me = this, mash = Mash();\n\n  me.next = function() {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  };\n\n  // Apply the seeding algorithm from Baagoe.\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n  if (me.s0 < 0) { me.s0 += 1; }\n  me.s1 -= mash(seed);\n  if (me.s1 < 0) { me.s1 += 1; }\n  me.s2 -= mash(seed);\n  if (me.s2 < 0) { me.s2 += 1; }\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }\n  prng.double = function() {\n    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n  };\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function(data) {\n    data = String(data);\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.alea = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v, w;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n"],"names":["global","pool","math","nodecrypto","width","startdenom","pow","significance","overflow","mask","seedrandom","seed","options","callback","key","shortseed","mixkey","flatten","entropy","tostring","out","randomBytes","Uint8Array","crypto","msCrypto","getRandomValues","e","browser","navigator","plugins","Date","screen","autoseed","arc4","ARC4","prng","n","g","d","x","int32","quick","double","S","pass","is_math_call","state","copy","this","t","keylen","length","me","i","j","s","count","r","f","slice","obj","depth","prop","result","typ","push","smear","stringseed","charCodeAt","a","String","fromCharCode","apply","random","module","exports","require","ex","define","self","Math","alea","xor128","xorwow","xorshift7","xor4096","tychei","sr","XorGen","strseed","next","b","c","floor","k","impl","opts","xg","v","w","X","limit","max","init","y","z","Long","wasm","WebAssembly","Instance","Module","low","high","unsigned","isLong","prototype","__isLong__","Object","defineProperty","value","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","str","radix","Error","RangeError","p","indexOf","substring","radixToPower","size","min","parseInt","power","mul","add","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","toString","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","other","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","hi","lo","fromBytes","bytes","fromBytesLE","fromBytesBE","Alea","mash","data","h","Mash","s0","s1","s2"],"sourceRoot":""}