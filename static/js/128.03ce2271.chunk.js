/*! For license information please see 128.03ce2271.chunk.js.LICENSE.txt */
"use strict";(self.webpackChunkcleros=self.webpackChunkcleros||[]).push([[128],{5128:(e,t,n)=>{n.r(t),n.d(t,{Tokenizer:()=>yl,UniversalSentenceEncoder:()=>_l,load:()=>El,loadQnA:()=>Tl,loadTokenizer:()=>bl,version:()=>Nl});var r={};n.r(r),n.d(r,{browserFiles:()=>Nn,browserHTTPRequest:()=>$n,concatenateArrayBuffers:()=>Nt,copyModel:()=>on,decodeWeights:()=>gt,encodeWeights:()=>ft,fromMemory:()=>Mn,fromMemorySync:()=>Fn,getLoadHandlers:()=>Ot,getModelArtifactsForJSON:()=>Tt,getModelArtifactsForJSONSync:()=>kt,getModelArtifactsInfoForJSON:()=>St,getSaveHandlers:()=>Dt,getWeightSpecs:()=>Et,http:()=>In,isHTTPScheme:()=>En,listModels:()=>sn,loadWeights:()=>kn,moveModel:()=>un,registerLoadRouter:()=>At,registerSaveRouter:()=>$t,removeModel:()=>an,weightsLoaderFactory:()=>Tn,withSaveHandler:()=>Cn,withSaveHandlerSync:()=>Rn});var s={};n.r(s),n.d(s,{conv2d:()=>Ho,depthwiseConv2d:()=>Go,matMul:()=>Jo});var a={};n.r(a),n.d(a,{json:()=>ou});var o={};n.r(o),n.d(o,{json:()=>iu});var i={};n.r(i),n.d(i,{json:()=>uu});var u={};n.r(u),n.d(u,{json:()=>lu});var l={};n.r(l),n.d(l,{json:()=>pu});var p={};n.r(p),n.d(p,{json:()=>cu});var c={};n.r(c),n.d(c,{json:()=>du});var d={};n.r(d),n.d(d,{json:()=>hu});var h={};n.r(h),n.d(h,{json:()=>mu});var m={};n.r(m),n.d(m,{json:()=>fu});var f={};n.r(f),n.d(f,{json:()=>gu});var g={};n.r(g),n.d(g,{json:()=>yu});var y={};n.r(y),n.d(y,{json:()=>bu});var b={};n.r(b),n.d(b,{json:()=>wu});var w={};n.r(w),n.d(w,{json:()=>Nu});var N={};n.r(N),n.d(N,{json:()=>vu});var v={};n.r(v),n.d(v,{json:()=>xu});var x={};n.r(x),n.d(x,{json:()=>ku});var k={};n.r(k),n.d(k,{json:()=>Tu});var T={};n.r(T),n.d(T,{OP_SCOPE_SUFFIX:()=>ut,abs:()=>Ln,acos:()=>Bn,acosh:()=>zn,add:()=>Pn,addN:()=>Vn,all:()=>Kn,any:()=>Un,argMax:()=>Wn,argMin:()=>Hn,asin:()=>qn,asinh:()=>jn,atan:()=>Gn,atan2:()=>Jn,atanh:()=>Yn,avgPool:()=>or,avgPool3d:()=>ir,basicLSTMCell:()=>mr,batchNorm:()=>gr,batchNorm2d:()=>yr,batchNorm3d:()=>br,batchNorm4d:()=>wr,batchToSpaceND:()=>fr,bincount:()=>Nr,booleanMaskAsync:()=>_o,broadcastArgs:()=>vr,broadcastTo:()=>xr,buffer:()=>hn,cast:()=>mn,ceil:()=>kr,clipByValue:()=>Sr,clone:()=>fn,complex:()=>pt,concat:()=>ur,concat1d:()=>Er,concat2d:()=>_r,concat3d:()=>Ir,concat4d:()=>$r,conv1d:()=>Dr,conv2d:()=>Ar,conv2dTranspose:()=>Mr,conv3d:()=>Fr,conv3dTranspose:()=>Rr,cos:()=>Lr,cosh:()=>Br,cosineWindow:()=>Bo,cumprod:()=>zr,cumsum:()=>Pr,denseBincount:()=>Vr,depthToSpace:()=>Kr,depthwiseConv2d:()=>Ur,diag:()=>Wr,dilation2d:()=>Hr,div:()=>jr,divNoNan:()=>Zr,dot:()=>Xr,dropout:()=>Ro,einsum:()=>es,elu:()=>ts,enclosingPowerOfTwo:()=>Lo,equal:()=>Jr,erf:()=>ns,euclideanNorm:()=>hs,exp:()=>ms,expandDims:()=>fs,expm1:()=>gs,eye:()=>bs,fft:()=>to,fill:()=>Tr,floor:()=>ws,floorDiv:()=>qr,fused:()=>s,gather:()=>Ns,gatherND:()=>Co,greater:()=>vs,greaterEqual:()=>xs,ifft:()=>no,imag:()=>ks,image:()=>Wi,inTopKAsync:()=>zo,irfft:()=>ro,isFinite:()=>Ts,isInf:()=>Ss,isNaN:()=>Es,leakyRelu:()=>_s,less:()=>Is,lessEqual:()=>$s,linalg:()=>Hi,linspace:()=>As,localResponseNormalization:()=>Ds,log:()=>Os,log1p:()=>Ms,logSigmoid:()=>Ls,logSoftmax:()=>zs,logSumExp:()=>Ps,logicalAnd:()=>Vs,logicalNot:()=>Ks,logicalOr:()=>Us,logicalXor:()=>Ws,losses:()=>qi,lowerBound:()=>js,matMul:()=>lr,max:()=>ss,maxPool:()=>Gs,maxPool3d:()=>Js,maxPoolWithArgmax:()=>Ys,maximum:()=>Qs,mean:()=>Zs,meshgrid:()=>ta,min:()=>as,minimum:()=>na,mirrorPad:()=>ra,mod:()=>sa,moments:()=>aa,movingAverage:()=>Do,mul:()=>pr,multiRNNCell:()=>oa,multinomial:()=>ia,neg:()=>Cs,norm:()=>ds,notEqual:()=>ua,oneHot:()=>la,ones:()=>ea,onesLike:()=>pa,op:()=>lt,outerProduct:()=>ca,pad:()=>da,pad1d:()=>ha,pad2d:()=>ma,pad3d:()=>fa,pad4d:()=>ga,pool:()=>ba,pow:()=>os,prelu:()=>wa,print:()=>gn,prod:()=>Na,raggedGather:()=>va,raggedTensorToTensor:()=>xa,rand:()=>ka,randomGamma:()=>Ia,randomNormal:()=>$a,randomStandardNormal:()=>Aa,randomUniform:()=>Da,range:()=>Oa,real:()=>Ma,reciprocal:()=>Fa,relu:()=>Ca,relu6:()=>Ra,reshape:()=>ar,reverse:()=>La,reverse1d:()=>Ba,reverse2d:()=>za,reverse3d:()=>Pa,reverse4d:()=>Va,rfft:()=>ao,round:()=>Ka,rsqrt:()=>Ua,scalar:()=>is,scatterND:()=>Mo,searchSorted:()=>qs,selu:()=>Wa,separableConv2d:()=>Ha,setdiff1dAsync:()=>qa,sigmoid:()=>cr,sign:()=>ja,signal:()=>Ui,sin:()=>Ga,sinh:()=>Ja,slice:()=>dr,slice1d:()=>Ya,slice2d:()=>Qa,slice3d:()=>Za,slice4d:()=>Xa,softmax:()=>eo,softplus:()=>Rs,spaceToBatchND:()=>ya,sparse:()=>ji,sparseToDense:()=>Fo,spectral:()=>Ki,split:()=>so,sqrt:()=>us,square:()=>ls,squaredDifference:()=>oo,squeeze:()=>io,stack:()=>uo,step:()=>lo,stridedSlice:()=>po,string:()=>Gi,sub:()=>Bs,sum:()=>ps,tan:()=>co,tanh:()=>hr,tensor:()=>dt,tensor1d:()=>ho,tensor2d:()=>mo,tensor3d:()=>fo,tensor4d:()=>go,tensor5d:()=>yo,tensor6d:()=>bo,tile:()=>ys,topk:()=>wo,transpose:()=>Ao,truncatedNormal:()=>No,unique:()=>vo,unsortedSegmentSum:()=>xo,unstack:()=>ko,upperBound:()=>To,variable:()=>So,where:()=>Yr,whereAsync:()=>Eo,zeros:()=>Xs,zerosLike:()=>Qr});class S{refCount(e){return E("refCount")}incRef(e){return E("incRef")}timerAvailable(){return!0}time(e){return E("time")}read(e){return E("read")}readSync(e){return E("readSync")}readToGPU(e,t){return E("readToGPU")}numDataIds(){return E("numDataIds")}disposeData(e,t){return E("disposeData")}write(e,t,n){return E("write")}move(e,t,n,r,s){return E("move")}memory(){return E("memory")}floatPrecision(){return E("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return E("dispose")}}function E(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function _(e,t){if(!e)throw new Error("string"===typeof t?t:t())}function I(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";_(O(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function $(e){_(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function A(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(null==t&&(t=[]),Array.isArray(e)||R(e)&&!n)for(let r=0;r<e.length;++r)A(e[r],t,n);else t.push(e);return t}function D(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function O(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function M(e){return e%1===0}function F(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function C(e,t){const n=t.length;return _((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),_(e.every((e=>M(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function R(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function L(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function B(e){return"string"===typeof e||e instanceof String}function z(e){return Array.isArray(e)?z(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":"number"===typeof e?"float32":B(e)?"string":function(e){return"boolean"===typeof e}(e)?"bool":"float32"}function P(e){return!!(e&&e.constructor&&e.call&&e.apply)}function V(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function K(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s=new Array;if(1===t.length){const a=t[0]*(r?2:1);for(let t=0;t<a;t++)s[t]=n[e+t]}else{const a=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<a;t++)s[t]=K(e+t*i,o,n,r)}return s}function U(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return K(0,e,t,n)}function W(e,t){const n=H(e,t);for(let r=0;r<n.length;r++)n[r]=1;return n}function H(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function q(e){e.forEach((t=>{_(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function j(e){return e&&e.then&&"function"===typeof e.then}const G="tfjsflags";class J{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=Y,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(Q().getBool("IS_TEST")||Q().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];Q().getBool("IS_TEST")||Q().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(j(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if("undefined"===typeof this.global||"undefined"===typeof this.global.location||"undefined"===typeof this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(G in e){e[G].split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function Y(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(function(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),s=1;s<n;s++)r[s-1]=arguments[s];return function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,r[0],r[1]),r.join("=")})),t}function Q(){return X}let Z,X=null;function ee(){if(null==Z){let e;if("undefined"!==typeof window)e=window;else if("undefined"!==typeof n.g)e=n.g;else if("undefined"!==typeof process)e=process;else{if("undefined"===typeof self)throw new Error("Could not find a global object");e=self}Z=e}return Z}function te(e,t){const n=function(){const e=ee();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}const ne="Cast",re="Fill",se="Identity",ae="LinSpace",oe="Range",ie="Tile",ue="Transpose",le="_FusedMatMul",pe="FusedConv2D",ce="FusedDepthwiseConv2D",de=te("kernelRegistry",(()=>new Map)),he=te("gradRegistry",(()=>new Map));function me(e,t){const n=ye(e,t);return de.get(n)}function fe(e){return he.get(e)}function ge(e){const t=de.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,o]=s,[i]=a.split("_");i===e&&n.push(o)}return n}function ye(e,t){return`${t}_${e}`}function be(){Q().getBool("IS_TEST")||Q().getBool("PROD")||console.warn(...arguments)}var we=n(7353);const Ne=n.n(we)()||we;function ve(e){return Ne.fromString(e,!0,16)}ve("c3a5c85c97cb3127"),ve("b492b66fbe98f273"),ve("9ae16a3b2f90404f");function xe(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=A(e)),Q().getBool("DEBUG")&&function(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function ke(){return Q().platform.now()}function Te(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"utf-8";return t=t||"utf-8",Q().platform.encode(e,t)}function Se(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"utf-8";return t=t||"utf-8",Q().platform.decode(e,t)}class Ee{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Ie)}profileKernel(e,t,n){let r;const s=()=>{r=n()};let a;const o=ke();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{s();for(const e of r)e.dataSync();a=Promise.resolve({kernelMs:ke()-o})}if(Q().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let i=0;i<r.length;i++){const t=r[i];t.data().then((n=>{_e(n,t.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),r,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])}))}))}}function _e(e,t,n){if("float32"!==t)return!1;for(let r=0;r<e.length;r++){const t=e[r];if(isNaN(t)||!isFinite(t))return console.warn(`Found ${t} in the result of '${n}'`),!0}return!1}class Ie{logKernelProfile(e,t,n,r,s,a){const o="number"===typeof r?F(`${r}ms`,9):r.error,i=F(e,25),u=t.rank,l=t.size,p=F(t.shape.toString(),14);let c="";for(const d in s){const e=s[d];if(null!=e){const n=e.shape||t.shape,r=n.length;c+=`${d}: ${r}D ${r>0?n:""} `}}console.log(`%c${i}\t%c${o}\t%c${u}D ${p}\t%c${l}\t%c${c}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function $e(e,t,n,r){const s=V(t),a=function(e,t,n,r){const s=D(t),a=r[r.length-1],o=new Array(a).fill(0),i=t.length,u="complex64"===n?Me(e):e;if(i>1)for(let l=0;l<s/a;l++){const e=l*a;for(let t=0;t<a;t++)o[t]=Math.max(o[t],Ae(u[e+t],0,n).length)}return o}(e,t,n,s),o=t.length,i=Oe(e,t,n,s,a),u=["Tensor"];return r&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${o}`),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(i.map((e=>"    "+e)).join("\n")),u.join("\n")}function Ae(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:B(e)?`'${e}'`:"bool"===n?De(e):parseFloat(e.toFixed(7)).toString(),F(r,t)}function De(e){return 0===e?"false":"true"}function Oe(e,t,n,r,s){let a=!(arguments.length>5&&void 0!==arguments[5])||arguments[5];const o="complex64"===n?2:1,i=t[0],u=t.length;if(0===u){if("complex64"===n){return[Ae(Me(e)[0],0,n)]}return"bool"===n?[De(e[0])]:[e[0].toString()]}if(1===u){if(i>20){const t=3*o;let r=Array.from(e.slice(0,t)),a=Array.from(e.slice((i-3)*o,i*o));return"complex64"===n&&(r=Me(r),a=Me(a)),["["+r.map(((e,t)=>Ae(e,s[t],n))).join(", ")+", ..., "+a.map(((e,t)=>Ae(e,s[i-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?Me(e):Array.from(e)).map(((e,t)=>Ae(e,s[t],n))).join(", ")+"]"]}const l=t.slice(1),p=r.slice(1),c=r[0]*o,d=[];if(i>20){for(let t=0;t<3;t++){const r=t*c,a=r+c;d.push(...Oe(e.slice(r,a),l,n,p,s,!1))}d.push("...");for(let t=i-3;t<i;t++){const r=t*c,a=r+c;d.push(...Oe(e.slice(r,a),l,n,p,s,t===i-1))}}else for(let f=0;f<i;f++){const t=f*c,r=t+c;d.push(...Oe(e.slice(t,r),l,n,p,s,f===i-1))}const h=2===u?",":"";d[0]="["+d[0]+h;for(let f=1;f<d.length-1;f++)d[f]=" "+d[f]+h;let m=",\n";for(let f=2;f<u;f++)m+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(a?"":m),d}function Me(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class Fe{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=D(e),null!=n){const e=n.length;_(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||function(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}(t,this.size),this.strides=V(e)}set(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];0===n.length&&(n=[0]),_(n.length===this.rank,(()=>`The number of provided coordinates (${n.length}) must match the rank (${this.rank})`));const s=this.locToIndex(n);this.values[s]=e}get(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];0===t.length&&(t=[0]);let r=0;for(const a of t){if(a<0||a>=this.shape[r]){const e=`Requested out of range element at ${t}.   Buffer shape=${this.shape}`;throw new Error(e)}r++}let s=t[t.length-1];for(let a=0;a<t.length-1;++a)s+=this.strides[a]*t[a];return this.values[s]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Ce().makeTensor(this.values,this.shape,this.dtype)}}let Ce=null,Re=null,Le=null;class Be{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=D(e),this.strides=V(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return Re.buffer(this.shape,this.dtype,e)}bufferSync(){return Re.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return U(this.shape,e,"complex64"===this.dtype)}arraySync(){return U(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=Ce().read(this.dataId);if("string"===this.dtype){const n=await e;try{return n.map((e=>Se(e)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),Ce().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=Ce().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>Se(e)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Ce().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Ce().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return Re.print(this,e)}clone(){return this.throwIfDisposed(),Re.clone(this)}toString(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return $e(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),Re.cast(this,e)}variable(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=arguments.length>1?arguments[1]:void 0,n=arguments.length>2?arguments[2]:void 0;return this.throwIfDisposed(),Ce().makeVariable(this,e,t,n)}}Object.defineProperty(Be,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),te("Tensor",(()=>Be));class ze extends Be{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!O(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Ce().disposeTensor(this),this.dataId=e.dataId,Ce().incRef(this,null)}dispose(){Ce().disposeVariable(this),this.isDisposedInternal=!0}}var Pe,Ve,Ke,Ue,We;Object.defineProperty(ze,Symbol.hasInstance,{value:e=>e instanceof Be&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(Pe||(Pe={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(Ve||(Ve={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(Ke||(Ke={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(Ue||(Ue={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(We||(We={}));const He={float32:Ue,int32:Ve,bool:Ke,complex64:We};function qe(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return He[e][t]}function je(e,t){if(e.dtype===t.dtype)return[e,t];const n=qe(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function Ge(e){const t=[];return Je(e,t,new Set),t}function Je(e,t,n){if(null==e)return;if(e instanceof Be)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!==typeof r)return;var r;const s=e;for(const a in s){const e=s[a];n.has(e)||(n.add(e),Je(e,t,n))}}function Ye(e){return null!=e.kernelName}class Qe{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Ze{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Qe}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return e in this.registryFactory?(be(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Ee(this.backendInstance),!0}setupRegisteredKernels(){ge(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){ge(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof S||"function"!==typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,be(`Initialization of backend ${e} failed`),be(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(n){return be(`Initialization of backend ${e} failed`),be(n.stack||n.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t),a=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,s,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!==typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!==typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!==typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(r){throw t(),r}}nextTensorId(){return Ze.nextTensorId++}nextVariableId(){return Ze.nextVariableId++}clone(e){const t=et.runKernel(se,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return et.runKernel(ne,t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=me(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach((e=>{s+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-s-a;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const u=Ye(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Ye(e)){const{kernelName:t,inputs:s,attrs:a}=e;null==this.backendName&&this.backend;const u=me(t,this.backendName);_(null!=u,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();i=u.kernelFunc({inputs:s,attrs:a,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const l=o.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(r){const e=this.getTensorsForGradient(t,s,l);n=this.saveTensorsForBackwardMode(e)}return l}}else{const{forwardFunc:t}=e,s=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy((()=>t(this.backend,s)));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:l,attrs:p}=e,c=Ye(e)?null:e.backwardsFunc;let d;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(d=this.profiler.profileKernel(u,l,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(d),t=d.outputs):t=o()})),r&&this.addTapeNode(u,l,t,c,n,p),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(l).map((e=>null!=l[e]?l[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:d.timeMs,extraInfo:d.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){const t=e.map((e=>this.keep(this.clone(e))));return t}getTensorsForGradient(e,t,n){const r=fe(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(_(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const o=n.filter(((e,t)=>s[t]));return a.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&B(e[0])&&(s=e.map((e=>Te(e))));const a=r.write(s,t,n),o=new Be(t,n,a,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(a),t=function(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const s={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(s,r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:s}=e,a=new Be(r,s,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new ze(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*L(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof ze||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*L(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const r of this.state.activeProfile.kernels)r.kernelTimeMs=await r.kernelTimeMs,r.extraInfo=await r.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},i=fe(e);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=H(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Ge(e),n=new Set(t.map((e=>e.id)));for(let s=0;s<this.state.activeScope.track.length;s++){const e=this.state.activeScope.track[s];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(_(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));_(s instanceof Be,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const r={},s={};for(let u=0;u<t.length;u++)r[t[u].id]=!0;for(let u=0;u<e.length;u++){const n=e[u],a=n.inputs;for(const e in a){const o=a[e];let i=!1;for(let e=0;e<t.length;e++)if(r[o.id]){n.outputs.forEach((e=>r[e.id]=!0)),i=!0,s[n.id]=!0;break}if(i)break}}const a={};a[n.id]=!0;const o={};for(let u=e.length-1;u>=0;u--){const t=e[u],n=t.inputs;for(let e=0;e<t.outputs.length;e++)if(a[t.outputs[e].id]){for(const e in n)a[n[e].id]=!0,o[t.id]=!0;break}}const i=[];for(let u=0;u<e.length;u++){const t=e[u];if(s[t.id]&&o[t.id]){const e={};for(const s in t.inputs){const n=t.inputs[s];r[n.id]&&(e[s]=n)}const n=Object.assign({},t);n.inputs=e,n.outputs=t.outputs,i.push(n)}}return i}(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[s.id]=null==n?function(e){const t=W(D(e),"float32");return et.makeTensor(t,e,"float32")}(s.shape):n,function(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],o=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const i=a.gradient(o);for(const t in a.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const s=n((()=>i[t]()));if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const o=a.inputs[t];if(!O(s.shape,o.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=s;else{const t=e[o.id];e[o.id]=r(t,s),t.dispose()}}}}(e,a,(e=>this.tidy(e)),tt);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(e){var t=this;return _(P(e),(()=>"The f passed in customGrad(f) must be a function.")),function(){for(var n=arguments.length,r=new Array(n),s=0;s<n;s++)r[s]=arguments[s];let a;_(r.every((e=>e instanceof Be)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const o={};r.forEach(((e,t)=>{o[t]=e}));return t.runKernelFunc({forwardFunc:(t,n)=>(a=e(...r,n),_(a.value instanceof Be,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),_(P(a.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),a.value),backwardsFunc:(e,t)=>{const n=a.gradFunc(e,t),s=Array.isArray(n)?n:[n];_(s.length===r.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),_(s.every((e=>e instanceof Be)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return s.forEach(((e,t)=>{o[t]=()=>e})),o},inputs:o})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=ke(),n=await this.backend.time(e);return n.wallMs=ke()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Qe;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Xe(){const e=ee();if(null==e._tfengine){const t=new J(e);e._tfengine=new Ze(t)}var t;return t=e._tfengine.ENV,X=t,Ce=()=>e._tfengine,e._tfengine}Ze.nextTensorId=0,Ze.nextVariableId=0;const et=Xe();function tt(e,t){const n={a:e,b:t};return et.runKernel("Add",n)}const nt=Q();function rt(e,t){let n=e;if(R(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||R(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&Q().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&st(e,r,[]),r}function st(e,t,n){if(n=n||[],!Array.isArray(e)&&!R(e))return void _(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));_(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),_(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let s=0;s<e.length;++s)st(e[s],r,n.concat(s))}function at(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function ot(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"numeric";if(e instanceof Be)return at(r,e.dtype,t,n),e;let s=z(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),at(r,s,t,n),null==e||!R(e)&&!Array.isArray(e)&&"number"!==typeof e&&"boolean"!==typeof e&&"string"!==typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=rt(e,s);R(e)||Array.isArray(e)||(e=[e]);const o="string"!==s?xe(e,s):A(e,[],!0);return et.makeTensor(o,a,s)}function it(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"numeric";if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,s)=>ot(e,`${t}[${s}]`,n,r)))}nt.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),nt.registerFlag("IS_BROWSER",(()=>"undefined"!==typeof window&&null!=window.document||"undefined"!==typeof WorkerGlobalScope)),nt.registerFlag("IS_NODE",(()=>"undefined"!==typeof process&&"undefined"!==typeof process.versions&&"undefined"!==typeof process.versions.node)),nt.registerFlag("IS_CHROME",(()=>"undefined"!==typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),nt.registerFlag("PROD",(()=>!1)),nt.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>nt.getBool("DEBUG"))),nt.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),nt.registerFlag("IS_TEST",(()=>!1)),nt.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),nt.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),nt.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1)),nt.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),nt.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));const ut="__op";function lt(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=ut;const s=function(){et.startScope(n);try{const e=r(...arguments);return j(e)&&console.error("Cannot return a Promise inside of tidy."),et.endScope(e),e}catch(e){throw et.endScope(null),e}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const pt=lt({complex_:function(e,t){const n=ot(e,"real","complex"),r=ot(t,"imag","complex");I(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return et.runKernel("Complex",s)}});function ct(e,t,n,r){if(null==r&&(r=z(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!R(e)&&!Array.isArray(e)&&"number"!==typeof e&&"boolean"!==typeof e&&"string"!==typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){q(t);const e=D(t),r=D(n);_(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let s=0;s<n.length;++s){const e=n[s],r=s!==n.length-1||e!==D(t.slice(s));_(n[s]===t[s]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return R(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?xe(e,r):A(e,[],!0),et.makeTensor(e,t,r)}function dt(e,t,n){return ct(e,t,rt(e,n),n)}const ht={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8},mt=4;async function ft(e,t){const n=[],r=[],s=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<s.length;++a){const o=s[a],i=Array.isArray(e)?e[a].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const u={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+mt*t.length,r=new Uint8Array(n);let s=0;for(let a=0;a<t.length;a++){const e=t[a],n=new Uint8Array(new Uint32Array([e.length]).buffer);r.set(n,s),s+=mt,r.set(e,s),s+=e.length}e(r)}));r.push(e)}else r.push(i.data());null!=t&&(u.group=t),n.push(u)}return{data:yt(await Promise.all(r)),specs:n}}function gt(e,t){const n={};let r,s=0;for(const a of t){const t=a.name,o=a.dtype,i=a.shape,u=D(i);let l;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=ht[n.dtype],p=e.slice(s,s+u*i),c="uint8"===n.dtype?new Uint8Array(p):new Uint16Array(p);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(c.length);for(let e=0;e<c.length;e++){const t=c[e];l[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=_t()),l=r(c)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(c.length);for(let e=0;e<c.length;e++){const t=c[e];l[e]=Math.round(t*n.scale+n.min)}}s+=u*i}else if("string"===o){const t=D(a.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(s,s+mt))[0];s+=mt;const n=new Uint8Array(e.slice(s,s+t));l.push(n),s+=t}}else{const r=ht[o],a=e.slice(s,s+u*r);if("float32"===o)l=new Float32Array(a);else if("int32"===o)l=new Int32Array(a);else if("bool"===o)l=new Uint8Array(a);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{l=new Float32Array(a);const e=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],r[t]=l[2*t+1];const s=dt(e,i,"float32"),o=dt(r,i,"float32");n[t]=pt(s,o),s.dispose(),o.dispose()}}s+=u*r}"complex64"!==o&&(n[t]=dt(l,i,o))}return n}function yt(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let s=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength})),r.buffer}const bt="undefined"!==typeof Buffer&&("undefined"===typeof Blob||"undefined"===typeof atob||"undefined"===typeof btoa);function wt(e){return bt?Buffer.byteLength(e):new Blob([e]).size}function Nt(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function vt(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function xt(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function kt(e,t,n){const r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),r}async function Tt(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),kt(e,n,r)}function St(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:wt(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:wt(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function Et(e){const t=[];for(const n of e)t.push(...n.weights);return t}function _t(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0===(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let n=1024;n<2048;n++)t[n]=939524096+(n-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let o=0;o<r.length;o++){const s=r[o],i=e[n[s>>10]+(1023&s)]+t[s>>10];a[o]=i}return new Float32Array(s)}}class It{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==It.instance&&(It.instance=new It),It.instance}static registerSaveRouter(e){It.getInstance().saveRouters.push(e)}static registerLoadRouter(e){It.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return It.getHandlers(e,"save")}static getLoadHandlers(e,t){return It.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?It.getInstance().loadRouters:It.getInstance().saveRouters).forEach((t=>{const s=t(e,n);null!==s&&r.push(s)})),r}}const $t=e=>It.registerSaveRouter(e),At=e=>It.registerLoadRouter(e),Dt=e=>It.getSaveHandlers(e),Ot=(e,t)=>It.getLoadHandlers(e,t),Mt="tensorflowjs",Ft="models_store",Ct="model_info_store";function Rt(){if(!Q().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"===typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Lt(e){const t=e.result;t.createObjectStore(Ft,{keyPath:"modelPath"}),t.createObjectStore(Ct,{keyPath:"modelPath"})}class Bt{constructor(e){if(this.indexedDB=Rt(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open(Mt,1);r.onupgradeneeded=()=>Lt(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction(Ft,"readonly"),r=t.objectStore(Ft).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{const r=St(t),a=s.transaction(Ct,"readwrite");let o=a.objectStore(Ct);const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;i.onsuccess=()=>{u=s.transaction(Ft,"readwrite");const i=u.objectStore(Ft).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=a.objectStore(Ct);const t=o.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(i.error)),t.onerror=e=>(s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)}))}}Bt.URL_SCHEME="indexeddb://";const zt=e=>{return Q().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Bt.URL_SCHEME)?(t=e.slice(Bt.URL_SCHEME.length),new Bt(t)):null;var t};It.registerSaveRouter(zt),It.registerLoadRouter(zt);class Pt{constructor(){this.indexedDB=Rt()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(Mt,1);n.onupgradeneeded=()=>Lt(n),n.onsuccess=()=>{const r=n.result,s=r.transaction(Ct,"readonly"),a=s.objectStore(Ct).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(Bt.URL_SCHEME)?t.slice(Bt.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open(Mt,1);r.onupgradeneeded=()=>Lt(r),r.onsuccess=()=>{const s=r.result,a=s.transaction(Ct,"readwrite"),o=a.objectStore(Ct),i=o.get(e);let u;i.onsuccess=()=>{if(null==i.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),a=()=>{u=s.transaction(Ft,"readwrite");const r=u.objectStore(Ft).delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)}))}}const Vt="/",Kt="tensorflowjs_models",Ut="info",Wt="model_topology",Ht="weight_specs",qt="weight_data",jt="model_metadata";function Gt(e){return{info:[Kt,e,Ut].join(Vt),topology:[Kt,e,Wt].join(Vt),weightSpecs:[Kt,e,Ht].join(Vt),weightData:[Kt,e,qt].join(Vt),modelMetadata:[Kt,e,jt].join(Vt)}}function Jt(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function Yt(e){const t=e.split(Vt);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(Vt)}class Qt{constructor(e){if(!Q().getBool("IS_BROWSER")||"undefined"===typeof window||"undefined"===typeof window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Gt(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const n=JSON.stringify(e.modelTopology),r=JSON.stringify(e.weightSpecs),s=St(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,n),this.LS.setItem(this.keys.weightSpecs,r),this.LS.setItem(this.keys.weightData,function(e){if(bt)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let r=0,s=t.length;r<s;r++)n+=String.fromCharCode(t[r]);return btoa(n)}(e.weightData));const t={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(t)),{modelArtifactsInfo:s}}catch(t){throw Jt(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(bt){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let r=0;r<t.length;++r)n.set([t.charCodeAt(r)],r);return n.buffer}(a),t}}Qt.URL_SCHEME="localstorage://";const Zt=e=>{return Q().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Qt.URL_SCHEME)?(t=e.slice(Qt.URL_SCHEME.length),new Qt(t)):null;var t};It.registerSaveRouter(Zt),It.registerLoadRouter(Zt);class Xt{constructor(){_(Q().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),_("undefined"===typeof window||"undefined"!==typeof window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=Kt+Vt,n=Vt+Ut;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);if(s.startsWith(t)&&s.endsWith(n)){e[Yt(s)]=JSON.parse(this.LS.getItem(s))}}return e}async removeModel(e){var t;const n=Gt(e=(t=e).startsWith(Qt.URL_SCHEME)?t.slice(Qt.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return Jt(n),r}}const en="://";class tn{constructor(){this.managers={}}static getInstance(){return null==tn.instance&&(tn.instance=new tn),tn.instance}static registerManager(e,t){_(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(en)&&(e=e.slice(0,e.indexOf(en))),_(e.length>0,(()=>"scheme must not be an empty string."));const n=tn.getInstance();_(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=tn.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(tn.getInstance().managers)}}function nn(e){if(-1===e.indexOf(en))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${tn.getSchemes().join(",")}`);return{scheme:e.split(en)[0],path:e.split(en)[1]}}async function rn(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];_(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=It.getLoadHandlers(e);_(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),_(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const s=r[0],a=It.getSaveHandlers(t);_(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),_(a.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const o=a[0],i=nn(e).scheme,u=nn(e).path,l=i===nn(e).scheme,p=await s.load();n&&l&&await tn.getManager(i).removeModel(u);const c=await o.save(p);return n&&!l&&await tn.getManager(i).removeModel(u),c.modelArtifactsInfo}async function sn(){const e=tn.getSchemes(),t={};for(const n of e){const e=await tn.getManager(n).listModels();for(const r in e){t[n+en+r]=e[r]}}return t}async function an(e){const t=nn(e);return tn.getManager(t.scheme).removeModel(t.path)}async function on(e,t){return rn(e,t,!1)}async function un(e,t){return rn(e,t,!0)}class ln{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){window&&Q().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{if(e.source===window&&e.data.name===this.messageName){e.stopPropagation();(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}}),!0))):setTimeout(e,t)}}if(Q().get("IS_BROWSER")){Q().setPlatform("browser",new ln);try{tn.registerManager(Qt.URL_SCHEME,new Xt)}catch(Il){}try{tn.registerManager(Bt.URL_SCHEME,new Pt)}catch(Il){}}const pn=()=>n(5817);let cn;class dn{constructor(){this.util=n(8590),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=Q().global.fetch?Q().global.fetch(e,t):(null==cn&&(cn=pn()),cn(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}}function hn(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"float32",n=arguments.length>2?arguments[2]:void 0;return t=t||"float32",q(e),new Fe(e,t,n)}Q().get("IS_NODE")&&!Q().get("IS_BROWSER")&&Q().setPlatform("node",new dn);const mn=lt({cast_:function(e,t){const n=ot(e,"x","cast");if(!function(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:t};return et.runKernel(ne,r,s)}});const fn=lt({clone_:function(e){const t={x:ot(e,"x","clone","string_or_numeric")};return et.runKernel(se,t)}});function gn(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];console.log(e.toString(t))}Xe();Re={buffer:hn,cast:mn,clone:fn,print:gn};function yn(e){return new Promise((e=>setTimeout(e))).then(e)}class bn{constructor(e){if(!Q().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(bn.URL_SCHEME)&&(e=e.slice(bn.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"===typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=xt(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=r,await yn((()=>s.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await yn((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:St(e)}}}}bn.URL_SCHEME="downloads://";class wn{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),s=r.modelTopology;if(null==s)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:s});const a=Tt(r,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const a of e)t.push(...a.weights),n.push(...a.paths);const r=this.checkManifestAndWeightFiles(e),s=n.map((e=>this.loadWeightsFile(e,r[e])));return Promise.all(s).then((e=>[t,Nt(e)]))}loadWeightsFile(e,t){return new Promise(((n,r)=>{const s=new FileReader;s.onload=e=>{const t=e.target.result;n(t)},s.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),s.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>vt(e.name))),r={};for(const s of e)s.paths.forEach((e=>{const s=vt(e);if(-1!==t.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(t.push(s),-1===n.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(s)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function Nn(e){return new wn(e)}function vn(e,t,n,r){!function(e){_(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){_(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),_(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),_(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map((a=>(a.then((a=>{const o=n+ ++s/e.length*(r-n);return t(o),a})),a))))}async function xn(e,t){null==t&&(t={});const n=null==t.fetchFunc?Q().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),s=(null==t.onProgress?await Promise.all(r):await vn(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(s):await vn(s,t.onProgress,.5,1)}async function kn(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;return Tn((e=>xn(e,{requestInit:r})))(e,t,n)}function Tn(e){return async function(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2?arguments[2]:void 0;const s=t.map((()=>!1)),a={},o=null!=r?r.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,l=ht[u]*D(e.shape),p=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=r?r.forEach(((t,n)=>{t===e.name&&(p(),o[n]=!0)})):p(),i.push(e.name),n+=l}))})),!o.every((e=>e))){const e=r.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const u=s.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),l=[];u.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)}))}));const p=await e(l),c={};let d=0;return u.forEach((e=>{const n=t[e].paths.length;let r=0;for(let t=0;t<n;t++)r+=p[d+t].byteLength;const s=new ArrayBuffer(r),o=new Uint8Array(s);let i=0;for(let t=0;t<n;t++){const e=new Uint8Array(p[d+t]);o.set(e,i),i+=e.byteLength}a[e].forEach((e=>{const t=gt(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const n in t)c[n]=t[n]})),d+=n})),c}}It.registerSaveRouter((e=>Q().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(bn.URL_SCHEME)?function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"model";return new bn(e)}(e.slice(bn.URL_SCHEME.length)):null));class Sn{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(_("function"===typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=Q().platform.fetch,_(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&_(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=xt(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:St(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(s){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return Tt(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),s=n>t?e.substring(n):"";return[r+"/",s]}(t),s=this.weightPathPrefix||n,a=Et(e),o=[],i=[];for(const u of e)for(const e of u.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(s+e+r);this.weightUrlConverter&&o.push(...await Promise.all(i));return[a,Nt(await xn(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function En(e){return null!=e.match(Sn.URL_SCHEME_REGEX)}Sn.URL_SCHEME_REGEX=/^https?:\/\//;const _n=(e,t)=>{if("undefined"===typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>En(e))):En(e),n)return In(e,t)}return null};function In(e,t){return new Sn(e,t)}function $n(e,t){return In(e,t)}It.registerSaveRouter(_n),It.registerLoadRouter(_n);class An{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class Dn{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class On{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function Mn(e,t,n,r){return new On(Fn(...arguments))}function Fn(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new An(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new An({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new An({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})}function Cn(e){return new Dn(e)}function Rn(e){return new Dn(e)}const Ln=lt({abs_:function(e){const t=ot(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return et.runKernel("ComplexAbs",e)}{const e={x:t};return et.runKernel("Abs",e)}}});const Bn=lt({acos_:function(e){const t={x:ot(e,"x","acos")};return et.runKernel("Acos",t)}});const zn=lt({acosh_:function(e){const t={x:ot(e,"x","acosh")};return et.runKernel("Acosh",t)}});const Pn=lt({add_:function(e,t){let n=ot(e,"a","add"),r=ot(t,"b","add");[n,r]=je(n,r);const s={a:n,b:r};return et.runKernel("Add",s)}});const Vn=lt({addN_:function(e){_(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),_(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>ot(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!O(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return et.runKernel("AddN",r)}});const Kn=lt({all_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const r={x:ot(e,"x","all","bool")},s={axis:t,keepDims:n};return et.runKernel("All",r,s)}});const Un=lt({any_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const r={x:ot(e,"x","any","bool")},s={axis:t,keepDims:n};return et.runKernel("Any",r,s)}});const Wn=lt({argMax_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n={x:ot(e,"x","argMax")},r={axis:t};return et.runKernel("ArgMax",n,r)}});const Hn=lt({argMin_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n={x:ot(e,"x","argMin")},r={axis:t};return et.runKernel("ArgMin",n,r)}});const qn=lt({asin_:function(e){const t={x:ot(e,"x","asin")};return et.runKernel("Asin",t)}});const jn=lt({asinh_:function(e){const t={x:ot(e,"x","asinh")};return et.runKernel("Asinh",t)}});const Gn=lt({atan_:function(e){const t={x:ot(e,"x","atan")};return et.runKernel("Atan",t)}});const Jn=lt({atan2_:function(e,t){let n=ot(e,"a","atan2"),r=ot(t,"b","atan2");[n,r]=je(n,r);const s={a:n,b:r};return et.runKernel("Atan2",s)}});const Yn=lt({atanh_:function(e){const t={x:ot(e,"x","atanh")};return et.runKernel("Atanh",t)}});function Qn(e,t,n,r,s,a){let o=arguments.length>6&&void 0!==arguments[6]&&arguments[6],i=arguments.length>7&&void 0!==arguments[7]?arguments[7]:"channelsLast",[u,l,p,c]=[-1,-1,-1,-1];if("channelsLast"===i)[u,l,p,c]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,c,l,p]=e}const[d,h,,m]=t,[f,g]=Xn(n),[y,b]=Xn(r),w=er(d,y),N=er(h,b),{padInfo:v,outHeight:x,outWidth:k}=function(e,t,n,r,s,a,o,i,u){let l,p,c;if("number"===typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=Zn(e,t,n));const a=e[0],o=e[1],i=tr((a-t+2*r)/n+1,s),u=tr((o-t+2*r)/n+1,s);return[i,u]}([t,n],a,r,e,i);p=s[0],c=s[1]}else if("same"===e){p=Math.ceil(t/r),c=Math.ceil(n/s);const e=Math.max(0,(p-1)*r+a-t),i=Math.max(0,(c-1)*s+o-n),u=Math.floor(e/2),d=e-u,h=Math.floor(i/2);l={top:u,bottom:d,left:h,right:i-h,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},p=Math.ceil((t-a+1)/r),c=Math.ceil((n-o+1)/s);else{if("object"!==typeof e)throw Error(`Unknown padding parameter: ${e}`);{const d="channelsLast"===u?e[1][0]:e[2][0],h="channelsLast"===u?e[1][1]:e[2][1],m="channelsLast"===u?e[2][0]:e[3][0],f="channelsLast"===u?e[2][1]:e[3][1];l={top:d,bottom:h,left:m,right:f,type:0===d&&0===h&&0===m&&0===f?"VALID":"EXPLICIT"},p=tr((t-a+d+h)/r+1,i),c=tr((n-o+m+f)/s+1,i)}}return{padInfo:l,outHeight:p,outWidth:c}}(s,l,p,f,g,w,N,a,i),T=o?m*c:m;let S;return"channelsFirst"===i?S=[u,T,x,k]:"channelsLast"===i&&(S=[u,x,k,T]),{batchSize:u,dataFormat:i,inHeight:l,inWidth:p,inChannels:c,outHeight:x,outWidth:k,outChannels:T,padInfo:v,strideHeight:f,strideWidth:g,filterHeight:d,filterWidth:h,effectiveFilterHeight:w,effectiveFilterWidth:N,dilationHeight:y,dilationWidth:b,inShape:e,outShape:S,filterShape:t}}function Zn(e,t,n){const r=er(t,arguments.length>3&&void 0!==arguments[3]?arguments[3]:1);return Math.floor((e[0]*(n-1)-n+r)/2)}function Xn(e){return"number"===typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function er(e,t){return t<=1?e:e+(e-1)*(t-1)}function tr(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function nr(e){const[t,n,r]=Xn(e);return 1===t&&1===n&&1===r}function rr(e,t){return nr(e)||nr(t)}function sr(e,t,n){if(null!=n){if("string"===typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"===typeof t)_(M(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!==typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{_(M(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}const ar=lt({reshape_:function(e,t){const n={x:ot(e,"x","reshape","string_or_numeric")},r={shape:t};return et.runKernel("Reshape",n,r)}});const or=lt({avgPool_:function(e,t,n,r,s){const a=ot(e,"x","avgPool","float32");_(rr(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let o=a,i=!1;3===a.rank&&(i=!0,o=ar(a,[1,a.shape[0],a.shape[1],a.shape[2]])),_(4===o.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`)),sr("avgPool",r,s);const u={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s};let p=et.runKernel("AvgPool",u,l);return p=mn(p,a.dtype),i?ar(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const ir=lt({avgPool3d_:function(e,t,n,r,s){let a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NDHWC";const o=ot(e,"x","avgPool3d","float32");let i=o,u=!1;4===o.rank&&(u=!0,i=ar(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),_(5===i.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`)),_("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),sr("avgPool3d",r,s);const l={x:i},p={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a};let c=et.runKernel("AvgPool3D",l,p);return c=mn(c,i.dtype),u?ar(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}});const ur=lt({concat_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;_(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=it(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return fn(n[0]);const r=n,s={axis:t};return et.runKernel("Concat",r,s)}});const lr=lt({matMul_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=ot(e,"a","matMul"),a=ot(t,"b","matMul");[s,a]=je(s,a);const o={a:s,b:a},i={transposeA:n,transposeB:r};return et.runKernel("BatchMatMul",o,i)}});const pr=lt({mul_:function(e,t){let n=ot(e,"a","mul"),r=ot(t,"b","mul");[n,r]=je(n,r);const s={a:n,b:r};return et.runKernel("Multiply",s)}});const cr=lt({sigmoid_:function(e){const t={x:ot(e,"x","sigmoid","float32")};return et.runKernel("Sigmoid",t)}});const dr=lt({slice_:function(e,t,n){const r=ot(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:t,size:n};return et.runKernel("Slice",s,a)}});const hr=lt({tanh_:function(e){const t={x:ot(e,"x","tanh","float32")};return et.runKernel("Tanh",t)}});const mr=lt({basicLSTMCell_:function(e,t,n,r,s,a){const o=ot(e,"forgetBias","basicLSTMCell"),i=ot(t,"lstmKernel","basicLSTMCell"),u=ot(n,"lstmBias","basicLSTMCell"),l=ot(r,"data","basicLSTMCell"),p=ot(s,"c","basicLSTMCell"),c=ot(a,"h","basicLSTMCell"),d=ur([l,c],1),h=lr(d,i),m=Pn(h,u),f=m.shape[0],g=m.shape[1]/4,y=[f,g],b=dr(m,[0,0],y),w=dr(m,[0,g],y),N=dr(m,[0,2*g],y),v=dr(m,[0,3*g],y),x=Pn(pr(cr(b),hr(w)),pr(p,cr(Pn(o,N))));return[x,pr(hr(x),cr(v))]}});const fr=lt({batchToSpaceND_:function(e,t,n){const r=ot(e,"x","batchToSpaceND"),s=t.reduce(((e,t)=>e*t));_(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),_(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),_(r.shape[0]%s===0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`));const a={x:r},o={blockShape:t,crops:n};return et.runKernel("BatchToSpaceND",a,o)}});const gr=lt({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const o=ot(e,"x","batchNorm"),i=ot(t,"mean","batchNorm"),u=ot(n,"variance","batchNorm");let l,p;null!=s&&(l=ot(s,"scale","batchNorm")),null!=r&&(p=ot(r,"offset","batchNorm")),_(i.rank===u.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),_(null==p||i.rank===p.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),_(null==l||i.rank===l.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const c={x:function(e){let t;return t=0===e.rank||1===e.rank?ar(e,[1,1,1,e.size]):2===e.rank?ar(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?ar(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(o),scale:l,offset:p,mean:i,variance:u},d={varianceEpsilon:a},h=et.runKernel("FusedBatchNorm",c,d);return ar(h,o.shape)}});const yr=lt({batchNorm2d_:function(e,t,n,r,s,a){const o=ot(e,"x","batchNorm"),i=ot(t,"mean","batchNorm"),u=ot(n,"variance","batchNorm");let l,p;return null!=s&&(l=ot(s,"scale","batchNorm")),null!=r&&(p=ot(r,"offset","batchNorm")),_(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),_(2===i.rank||1===i.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`)),_(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=l&&_(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=p&&_(2===p.rank||1===p.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${p.rank}.`)),gr(o,i,u,p,l,a)}});const br=lt({batchNorm3d_:function(e,t,n,r,s,a){const o=ot(e,"x","batchNorm"),i=ot(t,"mean","batchNorm"),u=ot(n,"variance","batchNorm");let l,p;return null!=s&&(l=ot(s,"scale","batchNorm")),null!=r&&(p=ot(r,"offset","batchNorm")),_(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),_(3===i.rank||1===i.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`)),_(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=l&&_(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=p&&_(3===p.rank||1===p.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${p.rank}.`)),gr(o,i,u,p,l,a)}});const wr=lt({batchNorm4d_:function(e,t,n,r,s,a){const o=ot(e,"x","batchNorm"),i=ot(t,"mean","batchNorm"),u=ot(n,"variance","batchNorm");let l,p;return null!=s&&(l=ot(s,"scale","batchNorm")),null!=r&&(p=ot(r,"offset","batchNorm")),_(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),_(4===i.rank||1===i.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`)),_(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=l&&_(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=p&&_(4===p.rank||1===p.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${p.rank}.`)),gr(o,i,u,p,l,a)}});const Nr=lt({bincount_:function(e,t,n){const r=ot(e,"x","bincount"),s=ot(t,"weights","bincount");_("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),_(n>=0,(()=>`size must be non-negative, but got ${n}.`)),_(s.size===r.size||0===s.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`));const a={x:r,weights:s},o={size:n};return et.runKernel("Bincount",a,o)}});const vr=lt({broadcastArgs_:function(e,t){const n=ot(e,"s0","broadcastArgs","int32"),r=ot(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const s={s0:n,s1:r};return et.runKernel("BroadcastArgs",s)}});const xr=lt({broadcastTo_:function(e,t){let n=ot(e,"broadcastTo","x");const r=n.shape;if(t.some((e=>!(e>0)||e%1!==0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=ar(n,e)}const s=n.shape,a=Array.from(t);for(let u=t.length-1;u>=0;u--)if(s[u]===t[u])a[u]=1;else if(1!==n.shape[u])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return fn(n);const o={x:n},i={reps:a};return et.runKernel(ie,o,i)}});const kr=lt({ceil_:function(e){const t={x:ot(e,"x","ceil","float32")};return et.runKernel("Ceil",t)}});function Tr(e,t,n){const r={shape:e,value:t,dtype:n};return et.runKernel(re,{},r)}const Sr=lt({clipByValue_:function(e,t,n){const r=ot(e,"x","clipByValue");if(_(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return Tr(r.shape,t,r.dtype);const s={x:r},a={clipValueMin:t,clipValueMax:n};return et.runKernel("ClipByValue",s,a)}});const Er=lt({concat1d_:function(e){return ur(e,0)}});const _r=lt({concat2d_:function(e,t){return ur(e,t)}});const Ir=lt({concat3d_:function(e,t){return ur(e,t)}});const $r=lt({concat4d_:function(e,t){return ur(e,t)}});const Ar=lt({conv2d_:function(e,t,n,r){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NHWC",a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],o=arguments.length>6?arguments[6]:void 0;const i=ot(e,"x","conv2d","float32"),u=ot(t,"filter","conv2d","float32");let l=i,p=!1;3===i.rank&&(p=!0,l=ar(i,[1,i.shape[0],i.shape[1],i.shape[2]])),_(4===l.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`)),_(4===u.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`)),sr("conv2d",r,o);const c="NHWC"===s?l.shape[3]:l.shape[1];_(c===u.shape[2],(()=>`Error in conv2d: depth of input (${c}) must match input depth for filter ${u.shape[2]}.`)),_(rr(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const d={x:l,filter:u},h={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},m=et.runKernel("Conv2D",d,h);return p?ar(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Dr=lt({conv1d_:function(e,t,n,r){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NWC",a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,o=arguments.length>6?arguments[6]:void 0;const i=ot(e,"x","conv1d"),u=ot(t,"filter","conv1d");let l=i,p=!1;2===i.rank&&(p=!0,l=ar(i,[1,i.shape[0],i.shape[1]])),_(3===l.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`)),_(3===u.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`)),sr("conv1d",r,o),_(l.shape[2]===u.shape[1],(()=>`Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`)),_(rr(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),_("NWC"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const c=ar(u,[1,u.shape[0],u.shape[1],u.shape[2]]),d=ar(l,[l.shape[0],1,l.shape[1],l.shape[2]]),h=Ar(d,c,[1,n],r,"NHWC",[1,a],o);return ar(h,p?[h.shape[2],h.shape[3]]:[h.shape[0],h.shape[2],h.shape[3]])}});const Or=lt({conv2DBackpropInput_:function(e,t,n,r,s){let a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NHWC",o=arguments.length>6?arguments[6]:void 0;_(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let i=e,u=t,l=!1;3===t.rank&&(l=!0,u=ar(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),_(4===i.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`)),_(4===u.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`)),_(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const p="NHWC"===a?i[3]:i[1],c="NHWC"===a?u.shape[3]:u.shape[1];_(p===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${p}) must match input depth for filter ${n.shape[2]}.`)),_(c===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${c}) must match output depth for filter ${n.shape[3]}.`)),sr("conv2dDerInput",s,o);const d={dy:u,filter:n},h={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,inputShape:i},m=et.runKernel("Conv2DBackpropInput",d,h);return l?ar(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Mr=lt({conv2dTranspose_:function(e,t,n,r,s,a){const o=ot(e,"x","conv2dTranspose"),i=ot(t,"filter","conv2dTranspose");return Or(n,o,i,r,s,"NHWC",a)}});const Fr=lt({conv3d_:function(e,t,n,r){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NDHWC",a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1,1];const o=ot(e,"x","conv3d"),i=ot(t,"filter","conv3d");let u=o,l=!1;4===o.rank&&(l=!0,u=ar(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),_(5===u.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`)),_(5===i.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`)),_(u.shape[4]===i.shape[3],(()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${i.shape[3]}.`)),_(rr(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),_("NDHWC"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`));const p={x:u,filter:i},c={strides:n,pad:r,dataFormat:s,dilations:a},d=et.runKernel("Conv3D",p,c);return l?ar(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const Cr=lt({conv3DBackpropInput_:function(e,t,n,r,s){_(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,o=t,i=!1;4===t.rank&&(i=!0,o=ar(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const u=a[4],l=o.shape[4];_(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),_(5===o.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`)),_(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),_(u===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`)),_(l===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`));const p={dy:o,filter:n},c={pad:s,strides:r,inputShape:a},d=et.runKernel("Conv3DBackpropInputV2",p,c);return i?ar(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}});const Rr=lt({conv3dTranspose_:function(e,t,n,r,s){const a=ot(e,"x","conv3dTranspose"),o=ot(t,"filter","conv3dTranspose");return Cr(n,a,o,r,s)}});const Lr=lt({cos_:function(e){const t={x:ot(e,"x","cos","float32")};return et.runKernel("Cos",t)}});const Br=lt({cosh_:function(e){const t={x:ot(e,"x","cosh","float32")};return et.runKernel("Cosh",t)}});const zr=lt({cumprod_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s={x:ot(e,"x","cumprod")},a={axis:t,exclusive:n,reverse:r};return et.runKernel("Cumprod",s,a)}});const Pr=lt({cumsum_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s={x:ot(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:r};return et.runKernel("Cumsum",s,a)}});const Vr=lt({denseBincount_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s=ot(e,"x","denseBincount"),a=ot(t,"weights","denseBincount");_("int32"===s.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`)),_(s.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`)),_(n>=0,(()=>`size must be non-negative, but got ${n}.`)),_(a.size===s.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`));const o={x:s,weights:a},i={size:n,binaryOutput:r};return et.runKernel("DenseBincount",o,i)}});const Kr=lt({depthToSpace_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"NHWC";const r=ot(e,"x","depthToSpace","float32"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];_(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),_(s*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`)),_(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`)),_(o%(t*t)===0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${r.shape}`));const i={x:r},u={blockSize:t,dataFormat:n};return et.runKernel("DepthToSpace",i,u)}});const Ur=lt({depthwiseConv2d_:function(e,t,n,r){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NHWC",a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],o=arguments.length>6?arguments[6]:void 0;const i=ot(e,"x","depthwiseConv2d","float32"),u=ot(t,"filter","depthwiseConv2d","float32");let l=i,p=!1;3===i.rank&&(p=!0,l=ar(i,[1,i.shape[0],i.shape[1],i.shape[2]])),_(4===l.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`)),_(4===u.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`));const c="NHWC"===s?l.shape[3]:l.shape[1];_(c===u.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${c}) must match the inChannels dimension in filter ${u.shape[2]}.`)),sr("depthwiseConv2d",r,o);const d={x:l,filter:u},h={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},m=et.runKernel("DepthwiseConv2dNative",d,h);return p?ar(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Wr=lt({diag_:function(e){const t={x:ot(e,"x","diag")};return et.runKernel("Diag",t)}});const Hr=lt({dilation2d_:function(e,t,n,r){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[1,1],a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NHWC";const o=ot(e,"x","dilation2d"),i=ot(t,"filter","dilation2d");_(3===o.rank||4===o.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`)),_(3===i.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`)),_("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let u=o,l=!1;3===o.rank&&(u=ar(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=!0);const p={x:u,filter:i},c={strides:n,pad:r,dilations:s},d=et.runKernel("Dilation2D",p,c);return l?ar(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});const qr=lt({floorDiv_:function(e,t){let n=ot(e,"a","floorDiv"),r=ot(t,"b","floorDiv");[n,r]=je(n,r);const s={a:n,b:r};return et.runKernel("FloorDiv",s)}});const jr=lt({div_:function(e,t){let n=ot(e,"a","div"),r=ot(t,"b","div");if([n,r]=je(n,r),"int32"===n.dtype&&"int32"===r.dtype)return qr(n,r);const s={a:n,b:r};return et.runKernel("RealDiv",s,{})}});function Gr(e,t){const n=[],r=Math.max(e.length,t.length);for(let s=0;s<r;s++){let r=e[e.length-s-1];null==r&&(r=1);let a=t[t.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(r)}}return n}const Jr=lt({equal_:function(e,t){let n=ot(e,"a","equal","string_or_numeric"),r=ot(t,"b","equal","string_or_numeric");[n,r]=je(n,r),Gr(n.shape,r.shape);const s={a:n,b:r};return et.runKernel("Equal",s)}});const Yr=lt({where_:function(e,t,n){const r=ot(t,"a","where"),s=ot(n,"b","where"),a=ot(e,"condition","where","bool"),o=Gr(Gr(a.shape,r.shape),s.shape),i={condition:xr(a,o),t:xr(r,o),e:xr(s,o)};return et.runKernel("Select",i)}});const Qr=lt({zerosLike_:function(e){const t={x:ot(e,"x","zerosLike")};return et.runKernel("ZerosLike",t)}});const Zr=lt({divNoNan_:function(e,t){let n=ot(e,"a","div"),r=ot(t,"b","div");[n,r]=je(n,r);const s=jr(n,r),a=Qr(s),o=Jr(r,a);return Yr(o,a,s)}});const Xr=lt({dot_:function(e,t){const n=ot(e,"t1","dot"),r=ot(t,"t2","dot");_((1===n.rank||2===n.rank)&&(1===r.rank||2===r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(_(s===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`)),1===n.rank&&1===r.rank){const e=ar(n,[1,-1]),t=ar(r,[-1,1]),s=lr(e,t);return ar(s,[])}if(1===n.rank&&2===r.rank){const e=ar(n,[1,-1]),t=ar(r,[r.shape[0],r.shape[1]]),s=lr(e,t);return ar(s,[s.size])}if(2===n.rank&&1===r.rank){const e=ar(r,[-1,1]),t=lr(n,e);return ar(t,[t.size])}{const e=ar(r,[r.shape[0],r.shape[1]]);return lr(n,e)}}});const es=lt({einsum_:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];const s=n.map(((e,t)=>ot(e,`tensors${t}`,"einsum"))),a={equation:e};return et.runKernel("Einsum",s,a)}});const ts=lt({elu_:function(e){const t={x:ot(e,"x","elu","float32")};return et.runKernel("Elu",t)}});const ns=lt({erf_:function(e){let t=ot(e,"x","erf");_("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=mn(t,"float32"));const n={x:t};return et.runKernel("Erf",n)}});function rs(e,t){return function(e,t,n){const r=e.length+t.length,s=[];let a=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?s.push(e[a++]):s.push(t[o++]);return s}(e,t.map((e=>1)),t)}const ss=lt({max_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const r={x:ot(e,"x","max")},s={reductionIndices:t,keepDims:n};return et.runKernel("Max",r,s)}});const as=lt({min_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const r={x:ot(e,"x","min")},s={axis:t,keepDims:n};return et.runKernel("Min",r,s)}});const os=lt({pow_:function(e,t){let n=ot(e,"base","pow"),r=ot(t,"exp","pow");[n,r]=je(n,r);const s={a:n,b:r};return et.runKernel("Pow",s)}});function is(e,t){if((R(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&R(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return ct(e,[],[],t)}const us=lt({sqrt_:function(e){const t={x:ot(e,"x","sqrt","float32")};return et.runKernel("Sqrt",t)}});const ls=lt({square_:function(e){const t=ot(e,"x","square");return et.runKernel("Square",{x:t},{})}});const ps=lt({sum_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=ot(e,"x","sum");"bool"===r.dtype&&(r=mn(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return et.runKernel("Sum",s,a)}});function cs(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(0===e.rank)return Ln(e);if(1!==e.rank&&null===n)return cs(ar(e,[-1]),t,n);if(1===e.rank||"number"===typeof n||Array.isArray(n)&&1===n.length){if(1===t)return ps(Ln(e),n);if(t===1/0)return ss(Ln(e),n);if(t===-1/0)return as(Ln(e),n);if("euclidean"===t||2===t)return us(ps(os(Ln(e),is(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return ss(ps(Ln(e),n[0]),n[1]-1);if(t===1/0)return ss(ps(Ln(e),n[1]),n[0]);if(t===-1/0)return as(ps(Ln(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return us(ps(ls(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const ds=lt({norm_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"euclidean",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s=cs(e=ot(e,"x","norm"),t,n);let a=s.shape;if(r){const t=C(n,e.shape);a=rs(s.shape,t)}return ar(s,a)}});const hs=lt({euclideanNorm_:function(e){return ds(e,"euclidean",arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,arguments.length>2&&void 0!==arguments[2]&&arguments[2])}});const ms=lt({exp_:function(e){const t={x:ot(e,"x","exp")};return et.runKernel("Exp",t)}});const fs=lt({expandDims_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=ot(e,"x","expandDims","string_or_numeric");_(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},s={dim:t};return et.runKernel("ExpandDims",r,s)}});const gs=lt({expm1_:function(e){const t={x:ot(e,"x","expm1")};return et.runKernel("Expm1",t)}});const ys=lt({tile_:function(e,t){const n=ot(e,"x","tile","string_or_numeric");_(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r={x:n},s={reps:t};return et.runKernel(ie,r,s)}});const bs=lt({eye_:function(e,t,n){null==t&&(t=e);const r=hn([e,t],arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32"),s=e<=t?e:t;for(let o=0;o<s;++o)r.set(1,o,o);const a=ar(r.toTensor(),[e,t]);if(null==n)return a;if(1===n.length)return ys(fs(a,0),[n[0],1,1]);if(2===n.length)return ys(fs(fs(a,0),0),[n[0],n[1],1,1]);if(3===n.length)return ys(fs(fs(fs(a,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});const ws=lt({floor_:function(e){const t={x:ot(e,"x","floor","float32")};return et.runKernel("Floor",t)}});const Ns=lt({gather_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;const s={x:ot(e,"x","gather"),indices:ot(t,"indices","gather","int32")},a={axis:n,batchDims:r};return et.runKernel("GatherV2",s,a)}});const vs=lt({greater_:function(e,t){let n=ot(e,"a","greater","string_or_numeric"),r=ot(t,"b","greater","string_or_numeric");[n,r]=je(n,r),Gr(n.shape,r.shape);const s={a:n,b:r};return et.runKernel("Greater",s)}});const xs=lt({greaterEqual_:function(e,t){let n=ot(e,"a","greaterEqual","string_or_numeric"),r=ot(t,"b","greaterEqual","string_or_numeric");[n,r]=je(n,r),Gr(n.shape,r.shape);const s={a:n,b:r};return et.runKernel("GreaterEqual",s)}});const ks=lt({imag_:function(e){const t={input:ot(e,"input","imag")};return et.runKernel("Imag",t)}});const Ts=lt({isFinite_:function(e){const t={x:ot(e,"x","isFinite")};return et.runKernel("IsFinite",t)}});const Ss=lt({isInf_:function(e){const t={x:ot(e,"x","isInf")};return et.runKernel("IsInf",t)}});const Es=lt({isNaN_:function(e){const t={x:ot(e,"x","isNaN")};return et.runKernel("IsNan",t)}});const _s=lt({leakyRelu_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.2;const n={x:ot(e,"x","leakyRelu")},r={alpha:t};return et.runKernel("LeakyRelu",n,r)}});const Is=lt({less_:function(e,t){let n=ot(e,"a","less","string_or_numeric"),r=ot(t,"b","less","string_or_numeric");[n,r]=je(n,r),Gr(n.shape,r.shape);const s={a:n,b:r};return et.runKernel("Less",s)}});const $s=lt({lessEqual_:function(e,t){let n=ot(e,"a","lessEqual","string_or_numeric"),r=ot(t,"b","lessEqual","string_or_numeric");[n,r]=je(n,r),Gr(n.shape,r.shape);const s={a:n,b:r};return et.runKernel("LessEqual",s)}});function As(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return et.runKernel(ae,{},r)}const Ds=lt({localResponseNormalization_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:.5;const a=ot(e,"x","localResponseNormalization");_(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),_(M(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let o=a,i=!1;3===a.rank&&(i=!0,o=ar(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:o},l={depthRadius:t,bias:n,alpha:r,beta:s},p=et.runKernel("LRN",u,l);return i?ar(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const Os=lt({log_:function(e){const t={x:ot(e,"x","log","float32")};return et.runKernel("Log",t)}});const Ms=lt({log1p_:function(e){const t={x:ot(e,"x","log1p")};return et.runKernel("Log1p",t)}});function Fs(e){return et.customGrad(e)}const Cs=lt({neg_:function(e){const t={x:ot(e,"x","neg")};return et.runKernel("Neg",t)}});const Rs=lt({softplus_:function(e){const t={x:ot(e,"x","softplus")};return et.runKernel("Softplus",t)}});const Ls=lt({logSigmoid_:function(e){const t=ot(e,"x","logSigmoid");return Fs((e=>({value:Cs(Rs(Cs(e))),gradFunc:t=>pr(t,cr(Cs(e)))})))(t)}});const Bs=lt({sub_:function(e,t){let n=ot(e,"a","sub"),r=ot(t,"b","sub");[n,r]=je(n,r);const s={a:n,b:r};return et.runKernel("Sub",s)}});const zs=lt({logSoftmax_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const n=ot(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const r=Fs(((e,n)=>{const r=ss(e,t,!0),s=Bs(e,r),a=Bs(mn(s,"float32"),Os(ps(ms(s),t,!0)));n([a]);return{value:a,gradFunc:(e,n)=>{const[r]=n,s=ms(r);return Bs(e,pr(ps(e,t,!0),s))}}}));return r(n)}});const Ps=lt({logSumExp_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const r=ot(e,"x","logSumExp"),s=C(t,r.shape),a=ss(r,s,!0),o=Bs(r,a),i=ms(o),u=ps(i,s),l=Os(u),p=Pn(ar(a,l.shape),l);if(n){const e=rs(p.shape,s);return ar(p,e)}return p}});const Vs=lt({logicalAnd_:function(e,t){const n=ot(e,"a","logicalAnd","bool"),r=ot(t,"b","logicalAnd","bool");Gr(n.shape,r.shape);const s={a:n,b:r};return et.runKernel("LogicalAnd",s)}});const Ks=lt({logicalNot_:function(e){const t={x:ot(e,"x","logicalNot","bool")};return et.runKernel("LogicalNot",t)}});const Us=lt({logicalOr_:function(e,t){const n=ot(e,"a","logicalOr","bool"),r=ot(t,"b","logicalOr","bool");Gr(n.shape,r.shape);const s={a:n,b:r};return et.runKernel("LogicalOr",s)}});const Ws=lt({logicalXor_:function(e,t){const n=ot(e,"a","logicalXor","bool"),r=ot(t,"b","logicalXor","bool");return Gr(n.shape,r.shape),Vs(Us(e,t),Ks(Vs(e,t)))}}),Hs=2147483648;const qs=lt({searchSorted_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"left";const r=ot(e,"sortedSequence","searchSorted"),s=ot(t,"values","searchSorted"),a=r.shape[r.shape.length-1],o=s.shape[s.shape.length-1],i=ar(r,[-1,a]),u=ar(s,[-1,o]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==u.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(D(u.shape)>=Hs)throw new Error("values tensor size must less than 2147483648");if(i.shape[1]>=Hs)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${i.shape[1]}`);const l={sortedSequence:i,values:u},p={side:n};return et.runKernel("SearchSorted",l,p)}});function js(e,t){return qs(e,t,"left")}const Gs=lt({maxPool_:function(e,t,n,r,s){const a=ot(e,"x","maxPool");let o=a,i=!1;3===a.rank&&(i=!0,o=ar(a,[1,a.shape[0],a.shape[1],a.shape[2]])),_(4===o.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`)),_(rr(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),sr("maxPool",r,s);const u={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s},p=et.runKernel("MaxPool",u,l);return i?ar(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const Js=lt({maxPool3d_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[1,1,1],n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0,s=arguments.length>4?arguments[4]:void 0,a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NDHWC";const o=ot(e,"x","maxPool3d");let i=o,u=!1;4===o.rank&&(u=!0,i=ar(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),_(5===i.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`)),_("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),sr("maxPool3d",r,s);const l={x:i},p={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a},c=et.runKernel("MaxPool3D",l,p);return u?ar(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}});const Ys=lt({maxPoolWithArgmax_:function(e,t,n,r){let s=arguments.length>4&&void 0!==arguments[4]&&arguments[4];const a={x:ot(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:r,includeBatchInIndex:s},i=et.runKernel("MaxPoolWithArgmax",a,o);return{result:i[0],indexes:i[1]}}});const Qs=lt({maximum_:function(e,t){let n=ot(e,"a","maximum"),r=ot(t,"b","maximum");[n,r]=je(n,r),"bool"===n.dtype&&(n=mn(n,"int32"),r=mn(r,"int32")),Gr(n.shape,r.shape);const s={a:n,b:r};return et.runKernel("Maximum",s)}});const Zs=lt({mean_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const r={x:ot(e,"x","mean")},s={axis:t,keepDims:n};return et.runKernel("Mean",r,s)}});function Xs(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"float32";if("complex64"===t){const t=Xs(e,"float32"),n=Xs(e,"float32");return pt(t,n)}const n=H(D(e),t);return et.makeTensor(n,e,t)}function ea(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"float32";if("complex64"===t){const t=ea(e,"float32"),n=Xs(e,"float32");return pt(t,n)}const n=W(D(e),t);return et.makeTensor(n,e,t)}function ta(e,t){let{indexing:n="xy"}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=ot(e,"x","meshgrid",e instanceof Be?e.dtype:"float32");if(void 0===t)return[r];let s=ot(t,"y","meshgrid",t instanceof Be?t.dtype:"float32");const a=D(r.shape),o=D(s.shape);return"xy"===n?(r=ar(r,[1,-1]),s=ar(s,[-1,1]),[lr(ea([o,1],r.dtype),r),lr(s,ea([1,a],s.dtype))]):(r=ar(r,[-1,1]),s=ar(s,[1,-1]),[lr(r,ea([1,o],r.dtype)),lr(ea([a,1],s.dtype),s)])}const na=lt({minimum_:function(e,t){let n=ot(e,"a","minimum"),r=ot(t,"b","minimum");[n,r]=je(n,r),"bool"===n.dtype&&(n=mn(n,"int32"),r=mn(r,"int32")),Gr(n.shape,r.shape);const s={a:n,b:r};return et.runKernel("Minimum",s)}});const ra=lt({mirrorPad_:function(e,t,n){_("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=ot(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");_(t.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`));const s="reflect"===n?1:0;for(let i=0;i<r.rank;i++)_(2===t[i].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),_(t[i][0]>=0&&t[i][0]<=r.shape[i]-s&&t[i][1]>=0&&t[i][1]<=r.shape[i]-s,(()=>`Padding in dimension ${i} cannot be greater than or equal to ${r.shape[i]-s} or less than 0 for input of shape ${r.shape}`));const a={paddings:t,mode:n},o={x:r};return et.runKernel("MirrorPad",o,a)}});const sa=lt({mod_:function(e,t){let n=ot(e,"a","mod"),r=ot(t,"b","mod");[n,r]=je(n,r);const s={a:n,b:r};return et.runKernel("Mod",s)}});const aa=lt({moments_:function(e){let t=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const n=C(arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,(e=ot(e,"x","moments")).shape),r=Zs(e,n,t);let s=r.shape;t||(s=rs(r.shape,n));const a=ls(Bs(mn(e,"float32"),ar(r,s)));return{mean:r,variance:Zs(a,n,t)}}});const oa=lt({multiRNNCell_:function(e,t,n,r){const s=ot(t,"data","multiRNNCell"),a=it(n,"c","multiRNNCell"),o=it(r,"h","multiRNNCell");let i=s;const u=[];for(let c=0;c<e.length;c++){const t=e[c](i,a[c],o[c]);u.push(t[0]),u.push(t[1]),i=t[1]}const l=[],p=[];for(let c=0;c<u.length;c+=2)l.push(u[c]),p.push(u[c+1]);return[l,p]}});const ia=lt({multinomial_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s=ot(e,"logits","multinomial"),a=s.size,o=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?ar(s,[1,-1]):s},u={numSamples:t,seed:n,normalized:r},l=et.runKernel("Multinomial",i,u);return 1===o?ar(l,[l.size]):l}});const ua=lt({notEqual_:function(e,t){let n=ot(e,"a","notEqual","string_or_numeric"),r=ot(t,"b","notEqual","string_or_numeric");[n,r]=je(n,r),Gr(n.shape,r.shape);const s={a:n,b:r};return et.runKernel("NotEqual",s)}});const la=lt({oneHot_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"int32";if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:ot(e,"indices","oneHot","int32")},o={dtype:s,depth:t,onValue:n,offValue:r};return et.runKernel("OneHot",a,o)}});const pa=lt({onesLike_:function(e){const t={x:ot(e,"x","onesLike")};return et.runKernel("OnesLike",t)}});const ca=lt({outerProduct_:function(e,t){const n=ot(e,"v1","outerProduct"),r=ot(t,"v2","outerProduct");_(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const s=ar(n,[-1,1]),a=ar(r,[1,-1]);return lr(s,a)}});const da=lt({pad_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;const r=ot(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:t,constantValue:n},a={x:r};return et.runKernel("PadV2",a,s)}});const ha=lt({pad1d_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return _(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),da(e,[t],n)}});const ma=lt({pad2d_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return _(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),da(e,t,n)}});const fa=lt({pad3d_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return _(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),da(e,t,n)}});const ga=lt({pad4d_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return _(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),da(e,t,n)}});const ya=lt({spaceToBatchND_:function(e,t,n){const r=ot(e,"x","spaceToBatchND");_(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),_(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),_(r.shape.reduce(((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]===0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const s={x:r},a={blockShape:t,paddings:n};return et.runKernel("SpaceToBatchND",s,a)}});const ba=lt({pool_:function(e,t,n,r,s,a,o){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=ot(e,"x","maxPool");let u=i,l=!1;3===i.rank&&(l=!0,u=ar(i,[1,i.shape[0],i.shape[1],i.shape[2]])),_(rr(a,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`));const p=function(e,t,n,r,s,a){let o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"channelsLast";const[i,u]=Xn(t);let l;if("channelsLast"===o)l=[i,u,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);l=[i,u,e[1],e[1]]}return Qn(e,l,n,r,s,a,!1,o)}(u.shape,t,a,s,r),c=[p.dilationHeight,p.dilationWidth];let d;d="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))),r=n.map((e=>e-1)),s=r.map((e=>Math.floor(e/2))),a=r.map(((e,t)=>e-s[t]));return r.map(((e,t)=>[s[t],a[t]]))}([p.filterHeight,p.filterWidth],c):[[0,0],[0,0]];const h=1===c[0]&&1===c[1],[m,f]=function(e,t,n){const r=n.map((e=>e[0])),s=n.map((e=>e[1])),a=e.concat(r,s),o=t.map(((e,t)=>(e-a[t]%e)%e)),i=s.map(((e,t)=>e+o[t])),u=t.map(((e,t)=>[r[t],i[t]])),l=t.map(((e,t)=>[0,o[t]]));return[u,l]}([p.inHeight,p.inWidth],c,d),g=h?r:"valid",y=h?u:ya(u,c,m),b=("avg"===n?()=>or(y,t,a,g,o):()=>Gs(y,t,a,g,o))(),w=h?b:fr(b,c,f);return l?ar(w,[w.shape[1],w.shape[2],w.shape[3]]):w}});const wa=lt({prelu_:function(e,t){const n={x:ot(e,"x","prelu"),alpha:ot(t,"alpha","prelu")};return et.runKernel("Prelu",n)}});const Na=lt({prod_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=ot(e,"x","prod");"bool"===r.dtype&&(r=mn(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return et.runKernel("Prod",s,a)}});const va=lt({raggedGather_:function(e,t,n,r){const s={paramsNestedSplits:e.map(((e,t)=>ot(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:ot(t,"paramsDenseValues","raggedGather"),indices:ot(n,"indices","raggedGather","int32")},a={outputRaggedRank:r},o=et.runKernel("RaggedGather",s,a);return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}});const xa=lt({raggedTensorToTensor_:function(e,t,n,r,s){const a=ot(e,"shape","raggedTensorToTensor","int32"),o=ot(t,"values","raggedTensorToTensor"),i={shape:a,values:o,defaultValue:ot(n,"defaultValue","raggedTensorToTensor",o.dtype),rowPartitionTensors:r.map(((e,t)=>ot(e,`tensors${t}`,"raggedTensorToTensor","int32")))},u={rowPartitionTypes:s};return et.runKernel("RaggedTensorToTensor",i,u)}});const ka=lt({rand_:function(e,t,n){const r=D(e);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);s=new Uint8Array(r)}for(let a=0;a<r;a++)s[a]=t();return et.makeTensor(s,e,n)}});var Ta=n(4334);class Sa{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=Ta.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const o=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*s*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Ea{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const s=r||Math.random();this.randu=Ta.alea(s.toString()),this.randn=new Sa(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),s=this.randu(),s<t||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class _a{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"===typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Ta.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Ia=lt({randomGamma_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32",s=arguments.length>4?arguments[4]:void 0;if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const a=new Ea(t,n,r,s),o=hn(e,r);for(let i=0;i<o.values.length;i++)o.values[i]=a.nextValue();return o.toTensor()}});const $a=lt({randomNormal_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3?arguments[3]:void 0,s=arguments.length>4?arguments[4]:void 0;if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new Sa(t,n,r,!1,s),o=hn(e,r);for(let i=0;i<o.values.length;i++)o.values[i]=a.nextValue();return o.toTensor()}});const Aa=lt({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return $a(e,0,1,t,n)}});const Da=lt({randomUniform_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>4?arguments[4]:void 0;const s=hn(e,arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32"),a=new _a(t,n,null,r);for(let o=0;o<s.values.length;o++)s.values[o]=a.nextValue();return s.toTensor()}});function Oa(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32";if(0===n)throw new Error("Cannot have a step of zero");const s={start:e,stop:t,step:n,dtype:r};return et.runKernel(oe,{},s)}const Ma=lt({real_:function(e){const t={input:ot(e,"input","real")};return et.runKernel("Real",t)}});const Fa=lt({reciprocal_:function(e){const t={x:ot(e,"x","reciprocal")};return et.runKernel("Reciprocal",t)}});const Ca=lt({relu_:function(e){const t={x:ot(e,"x","relu")};return et.runKernel("Relu",t)}});const Ra=lt({relu6_:function(e){const t={x:ot(e,"x","relu6")};return et.runKernel("Relu6",t)}});const La=lt({reverse_:function(e,t){const n={x:ot(e,"x","reverse")},r={dims:t};return et.runKernel("Reverse",n,r)}});const Ba=lt({reverse1d_:function(e){const t=ot(e,"x","reverse");return _(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),La(t,0)}});const za=lt({reverse2d_:function(e,t){const n=ot(e,"x","reverse");return _(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),La(n,t)}});const Pa=lt({reverse3d_:function(e,t){const n=ot(e,"x","reverse");return _(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),La(n,t)}});const Va=lt({reverse4d_:function(e,t){const n=ot(e,"x","reverse");return _(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),La(n,t)}});const Ka=lt({round_:function(e){const t={x:ot(e,"x","round")};return et.runKernel("Round",t)}});const Ua=lt({rsqrt_:function(e){const t={x:ot(e,"x","rsqrt","float32")};return et.runKernel("Rsqrt",t)}});const Wa=lt({selu_:function(e){const t={x:ot(e,"x","selu")};return et.runKernel("Selu",t)}});const Ha=lt({separableConv2d_:function(e,t,n,r,s){let a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"NHWC";const i=ot(e,"x","separableConv2d"),u=ot(t,"depthwiseFilter","separableConv2d"),l=ot(n,"pointwiseFilter","separableConv2d");let p=i,c=!1;if(3===i.rank&&(c=!0,p=ar(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");_(4===p.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${p.rank}.`)),_(4===u.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`)),_(4===l.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`)),_(1===l.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`)),_(1===l.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`));const d=u.shape[2],h=u.shape[3];_(l.shape[2]===d*h,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*h}, but got ${l.shape[2]}.`));const m=Ur(p,u,r,s,o,a),f=Ar(m,l,1,"valid",o);return c?ar(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const qa=async function(e,t){const n=ot(e,"x","setdiff1d"),r=ot(t,"y","setdiff1d");_(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),_(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),_(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),a=await r.data(),o=new Set(a);let i=0;for(let p=0;p<s.length;p++)o.has(s[p])||i++;const u=new Fe([i],n.dtype),l=new Fe([i],"int32");for(let p=0,c=0;p<s.length;p++)o.has(s[p])||(u.values[c]=s[p],l.values[c]=p,c++);return[u.toTensor(),l.toTensor()]};const ja=lt({sign_:function(e){const t={x:ot(e,"x","sign")};return et.runKernel("Sign",t)}});const Ga=lt({sin_:function(e){const t={x:ot(e,"x","sin","float32")};return et.runKernel("Sin",t)}});const Ja=lt({sinh_:function(e){const t={x:ot(e,"x","sinh")};return et.runKernel("Sinh",t)}});const Ya=lt({slice1d_:function(e,t,n){const r=ot(e,"x","slice1d");return _(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),dr(r,[t],[n])}});const Qa=lt({slice2d_:function(e,t,n){const r=ot(e,"x","slice2d");return _(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),dr(r,t,n)}});const Za=lt({slice3d_:function(e,t,n){const r=ot(e,"x","slice3d");return _(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),dr(r,t,n)}});const Xa=lt({slice4d_:function(e,t,n){const r=ot(e,"x","slice4d");return _(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),dr(r,t,n)}});const eo=lt({softmax_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const n=ot(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},s={dim:t};return et.runKernel("Softmax",r,s)}});const to=lt({fft_:function(e){_("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return et.runKernel("FFT",t)}});const no=lt({ifft_:function(e){_("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return et.runKernel("IFFT",t)}});const ro=lt({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=ar(e,[n,t]);r=no(s)}else{const s=[n,2*(t-1)],a=ar(Ma(e),[n,t]),o=ar(ks(e),[n,t]),i=La(dr(a,[0,1],[n,t-2]),1),u=pr(La(dr(o,[0,1],[n,t-2]),1),is(-1)),l=ur([a,i],1),p=ur([o,u],1),c=ar(pt(l,p),[s[0],s[1]]);r=no(c)}if(r=Ma(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=ar(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}});const so=lt({split_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;const r={x:ot(e,"x","split")},s={numOrSizeSplits:t,axis:n};return et.runKernel("SplitV",r,s)}});const ao=lt({rfft_:function(e,t){_("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,s=dr(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,s=ur([e,Xs(r)],e.shape.length-1),n=t}else s=e;const a=Qr(s),o=ar(pt(s,a),[r,n]),i=to(o),u=Math.floor(n/2)+1,l=Ma(i),p=ks(i),c=so(l,[u,n-u],l.shape.length-1),d=so(p,[u,n-u],p.shape.length-1),h=s.shape.slice();return h[s.shape.length-1]=u,ar(pt(c[0],d[0]),h)}});const oo=lt({squaredDifference_:function(e,t){let n=ot(e,"a","squaredDifference"),r=ot(t,"b","squaredDifference");[n,r]=je(n,r),Gr(n.shape,r.shape);const s={a:n,b:r};return et.runKernel("SquaredDifference",s,{})}});const io=lt({squeeze_:function(e,t){const n=ot(e,"x","squeeze","string_or_numeric");return ar(n,function(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:C(t,e).sort();let o=0;for(let i=0;i<e.length;++i){if(null!=a){if(a[o]===i&&1!==e[i])throw new Error(`Can't squeeze axis ${i} since its dim '${e[i]}' is not 1`);(null==a[o]||a[o]>i)&&1===e[i]&&(n.push(e[i]),r.push(i)),a[o]<=i&&o++}1!==e[i]&&(n.push(e[i]),r.push(i))}return{newShape:n,keptDims:r}}(n.shape,t).newShape)}});const uo=lt({stack_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=it(e,"tensors","stack","string_or_numeric");_(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&_(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,s={axis:t};return et.runKernel("Pack",r,s)}});const lo=lt({step_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n={x:ot(e,"x","step")},r={alpha:t};return et.runKernel("Step",n,r)}});const po=lt({stridedSlice_:function(e,t,n,r){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,i=arguments.length>7&&void 0!==arguments[7]?arguments[7]:0,u=arguments.length>8&&void 0!==arguments[8]?arguments[8]:0;const l={x:ot(e,"x","stridedSlice","string_or_numeric")},p={begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};return et.runKernel("StridedSlice",l,p)}});const co=lt({tan_:function(e){const t={x:ot(e,"x","tan","float32")};return et.runKernel("Tan",t)}});function ho(e,t){$(e);const n=rt(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return ct(e,null,n,t)}function mo(e,t,n){if($(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=rt(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return ct(e,t,r,n)}function fo(e,t,n){if($(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=rt(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return ct(e,t,r,n)}function go(e,t,n){if($(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=rt(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return ct(e,t,r,n)}function yo(e,t,n){if($(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=rt(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return ct(e,t,r,n)}function bo(e,t,n){if($(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=rt(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return ct(e,t=t||r,r,n)}const wo=lt({topk_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];const r=ot(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${t}`);const a={x:r},o={k:t,sorted:n},[i,u]=et.runKernel("TopK",a,o);return{values:i,indices:u}}});const No=lt({truncatedNormal_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3?arguments[3]:void 0,s=arguments.length>4?arguments[4]:void 0;if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new Sa(t,n,r,!0,s),o=hn(e,r);for(let i=0;i<o.values.length;i++)o.values[i]=a.nextValue();return o.toTensor()}});const vo=lt({unique_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=ot(e,"x","unique","string_or_numeric");_(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},s={axis:t},[a,o]=et.runKernel("Unique",r,s);return{values:a,indices:o}}});const xo=lt({unsortedSegmentSum_:function(e,t,n){const r=ot(e,"x","unsortedSegmentSum"),s=ot(t,"segmentIds","unsortedSegmentSum","int32");_(M(n),(()=>"numSegments must be of dtype int"));const a={x:r,segmentIds:s},o={numSegments:n};return et.runKernel("UnsortedSegmentSum",a,o)}});const ko=lt({unstack_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=ot(e,"x","unstack","string_or_numeric");_(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},s={axis:t};return et.runKernel("Unpack",r,s)}});function To(e,t){return qs(e,t,"right")}function So(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;return et.makeVariable(e,t,n,r)}const Eo=async function(e){const t=ot(e,"condition","whereAsync","bool"),n=await t.data(),r=function(e,t){const n=[];for(let a=0;a<t.length;a++)t[a]&&n.push(a);const r=hn(e,"int32"),s=hn([n.length,e.length],"int32");for(let a=0;a<n.length;a++){const t=r.indexToLoc(n[a]),o=a*e.length;s.values.set(t,o)}return s.toTensor()}(t.shape,n);return e!==t&&t.dispose(),r};const _o=async function(e,t,n){const r=ot(e,"tensor","boolMask"),s=ot(t,"mask","boolMask","bool"),a=null==n?0:n,o=s.rank,i=r.shape;_(o>0,(()=>"mask cannot be scalar")),I(i.slice(a,a+o),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let f=a;f<a+o;f++)u*=i[f];const l=i.slice(0,a).concat([u],i.slice(a+o)),p=ar(r,l),c=ar(s,[-1]),d=await Eo(c),h=io(d,[1]),m=Ns(p,h,a);return e!==r&&r.dispose(),t!==s&&s.dispose(),h.dispose(),p.dispose(),c.dispose(),d.dispose(),m};function Io(e,t){return et.tidy(e,t)}function $o(e){return et.keep(e)}Le=function(e){Q().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")};const Ao=lt({transpose_:function(e,t,n){const r=ot(e,"x","transpose");if(null==t&&(t=r.shape.map(((e,t)=>t)).reverse()),_(r.rank===t.length,(()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`)),t.forEach((e=>{_(e>=0&&e<r.rank,(()=>"All entries in 'perm' must be between 0 and "+(r.rank-1)+` but got ${t}`))})),r.rank<=1)return r.clone();const s={x:r},a={perm:t};return"complex64"===r.dtype?Io((()=>{let e=Ma(r),t=ks(r);return e=et.runKernel(ue,{x:e},a),t=et.runKernel(ue,{x:t},a),n&&(t=Cs(t)),pt(e,t)})):et.runKernel(ue,s,a)}});const Do=lt({movingAverage_:function(e,t,n,r){let s=!(arguments.length>4&&void 0!==arguments[4])||arguments[4];const a=ot(e,"v","movingAverage"),o=ot(t,"x","movingAverage"),i=ot(n,"decay","movingAverage");var u,l;l=o,_((u=a).dtype===l.dtype,(()=>`The dtypes of the first(${u.dtype}) and second(${l.dtype}) input must match`)),_(O(a.shape,o.shape),(()=>"Shape mismatch in v and x"));const p=is(1),c=Bs(p,i);let d=pr(Bs(o,a),c);if(s){_(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=ot(r,"step","movingAverage");d=jr(d,Bs(p,os(i,e)))}return Pn(a,d)}});function Oo(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}!function(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let o=0;o<s;++o)if(n.shape[o]!==t.shape[o])throw new Error(a+` updates.shape[${o}] (${n.shape[o]}) != indices.shape[${o}] (${t.shape[o]}).`);for(let o=0;o<n.rank-s;++o)if(n.shape[o+s]!==e[o+r])throw new Error(a+` updates.shape[${o+s}] (${n.shape[o+s]}) != shape[${o+s}] (${e[o+s]})`)}(n,t,e)}const Mo=lt({scatterND_:function(e,t,n){const r=ot(e,"indices","scatterND","int32"),s=ot(t,"updates","scatterND");Oo(s,r,n);const a={indices:r,updates:s},o={shape:n};return et.runKernel("ScatterNd",a,o)}});const Fo=lt({sparseToDense_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;const s=ot(e,"sparseIndices","sparseToDense","int32"),a=ot(t,"sparseValues","sparseToDense","string_or_numeric"),o=ot(r,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,o);const i={sparseIndices:s,sparseValues:a,defaultValue:o},u={outputShape:n};return et.runKernel("SparseToDense",i,u)}});const Co=lt({gatherND_:function(e,t){const n=ot(t,"indices","gatherND","int32"),r={params:ot(e,"x","gatherND","string_or_numeric"),indices:n};return et.runKernel("GatherNd",r)}});const Ro=lt({dropout_:function(e,t,n,r){const s=ot(e,"x","dropout");if(_("float32"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),_(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof Be?s.clone():s;const a=function(e,t){if(null==t)return e.shape.slice();if(O(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(s,n),o=1-t,i=jr(ws(Pn(Da(a,0,1,"float32",r),o)),o);return pr(s,i)}});function Lo(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Bo(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const o=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(o)}return ho(s,"float32")}const zo=async function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;const r=ot(e,"predictions","inTopK"),s=ot(t,"targets","inTopK");_(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),_(r.rank-1===s.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`)),I(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];_(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const o=await r.data(),i=await s.data(),[u,l]=[o.length/a,a],p=function(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}("bool",u);for(let c=0;c<u;c++){const e=c*l,t=o.subarray(e,e+l),r=[];for(let n=0;n<t.length;n++)r.push({value:t[n],index:n});r.sort(((e,t)=>t.value-e.value)),p[c]=0;for(let s=0;s<n;s++)if(r[s].index===i[c]){p[c]=1;break}}return e!==r&&r.dispose(),t!==s&&s.dispose(),dt(p,s.shape,"bool")};const Po=lt({conv2DBackpropFilter_:function(e,t,n,r,s){let a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NHWC",o=arguments.length>6?arguments[6]:void 0,i=e;3===e.rank&&(i=ar(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=ar(t,[1,t.shape[0],t.shape[1],t.shape[2]])),_(4===i.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`)),_(4===u.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`)),_(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const l="NHWC"===a?i.shape[3]:i.shape[1],p="NHWC"===a?u.shape[3]:u.shape[1];_(l===n[2],(()=>`Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${n[2]}.`)),_(p===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${p}) must match output depth for filter (${n[3]}).`)),sr("conv2dDerFilter",s,o);const c={x:i,dy:u},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,filterShape:n};return et.runKernel("Conv2DBackpropFilter",c,d)}});function Vo(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return pr(e,lo(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Ko(e,t){let n=t;const r=function(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,o=t[a];(null==s||1===s&&o>1)&&n.unshift(a)}return n}(e.shape,t.shape);return r.length>0&&(n=ps(n,r)),ar(n,e.shape)}function Uo(e,t,n,r){if("linear"===t)return e;if("relu"===t)return Ca(e);if("elu"===t)return ts(e);if("relu6"===t)return Ra(e);if("prelu"===t)return wa(e,n);if("leakyrelu"===t)return _s(e,r);if("sigmoid"===t)return cr(e);throw new Error(`Unknown fused activation ${t}.`)}const Wo=(e,t)=>!(e>0)||"linear"===t;const Ho=lt({fusedConv2d_:function(e){let{x:t,filter:n,strides:r,pad:s,dataFormat:a="NHWC",dilations:o=[1,1],dimRoundingMode:i,bias:u,activation:l="linear",preluActivationWeights:p,leakyreluAlpha:c}=e;if(l=l||"linear",!1===Wo(et.state.gradientDepth,l)){_("NHWC"===a,(()=>`Error in fused conv2d: got dataFormat of ${a} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let e=Ar(t,n,r,s,a,o,i);return null!=u&&(e=Pn(e,u)),Uo(e,l,p,c)}const d=ot(t,"x","conv2d","float32"),h=ot(n,"filter","conv2d","float32");let m=d,f=!1;3===d.rank&&(f=!0,m=ar(d,[1,d.shape[0],d.shape[1],d.shape[2]])),_(4===m.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${m.rank}.`)),_(4===h.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`)),sr("fused conv2d",s,i);const g="NHWC"===a?m.shape[3]:m.shape[1];_(h.shape[2]===g,(()=>`Error in conv2d: depth of input (${g}) must match input depth for filter ${h.shape[2]}.`)),_(rr(r,o),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${r} and dilations '${o}'`));const y=Qn(m.shape,h.shape,r,o,s,i);let b,w;if(null!=u&&(b=ot(u,"bias","fused conv2d"),[b]=je(b,d),"NHWC"===a?Gr(y.outShape,b.shape):(_(b.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${b.shape.length}.`)),_(0===b.shape.length||b.shape[0]===y.outChannels||1===b.shape[0],(()=>`Error in fused conv2d: bias shape (${b.shape}) is not compatible with the number of output channels (${y.outChannels})`)))),null!=p){const e=p.shape;if(_(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)_(1===e[0]||e[0]===y.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${y.outChannels}).`));else if(3===e.length)try{Gr(e,y.outShape)}catch(k){const t=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${y.outShape}).`;throw Error(t)}w=ot(p,"prelu weights","fused conv2d")}const N=(e,t)=>{_("NHWC"===a,(()=>`Error in gradient of fused conv2D: got dataFormat of ${a} but only NHWC is currently supported.`));const[n,i,u,p]=t,c=Vo(e,u,l);_(nr(o),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`));const d=[Or(i.shape,c,n,r,s),Po(i,c,n.shape,r,s)];if(null!=p){const e=Ko(p,c);d.push(e)}return d},v={x:m,filter:h,bias:b,preluActivationWeights:w},x={strides:r,pad:s,dataFormat:a,dilations:o,dimRoundingMode:i,activation:l,leakyreluAlpha:c};if(null==u){const e=Fs(((e,t,n)=>{let r=et.runKernel(pe,v,x);return n([t,e,r]),f&&(r=ar(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:N}}));return e(m,h)}{const e=Fs(((e,t,n,r)=>{let s=et.runKernel(pe,v,x);return r([t,e,s,n]),f&&(s=ar(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:N}}));return e(m,h,b)}}});const qo=lt({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s){let a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],o=arguments.length>6?arguments[6]:void 0,i=e;3===e.rank&&(i=ar(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=ar(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={x:i,dy:u},p={strides:r,pad:s,dimRoundingMode:o,dilations:a,filterShape:n};return et.runKernel("DepthwiseConv2dNativeBackpropFilter",l,p)}});const jo=lt({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s){let a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],o=arguments.length>6?arguments[6]:void 0,i=t,u=!1;3===t.rank&&(u=!0,i=ar(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={dy:i,filter:n},p={strides:r,pad:s,dimRoundingMode:o,dilations:a,inputShape:e},c=et.runKernel("DepthwiseConv2dNativeBackpropInput",l,p);return u?ar(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Go=lt({fusedDepthwiseConv2d_:function(e){let{x:t,filter:n,strides:r,pad:s,dataFormat:a="NHWC",dilations:o=[1,1],dimRoundingMode:i,bias:u,activation:l="linear",preluActivationWeights:p,leakyreluAlpha:c}=e;if(!1===Wo(et.state.gradientDepth,l)){let e=Ur(t,n,r,s,a,o,i);return null!=u&&(e=Pn(e,u)),Uo(e,l,p,c)}const d=ot(t,"x","depthwiseConv2d","float32"),h=ot(n,"filter","depthwiseConv2d","float32");let m=d,f=!1;3===d.rank&&(f=!0,m=ar(d,[1,d.shape[0],d.shape[1],d.shape[2]])),_(4===m.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${m.rank}.`)),_(4===h.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`)),_(m.shape[3]===h.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${m.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`)),null==o&&(o=[1,1]),_(rr(r,o),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${r} and dilations '${o}'`)),sr("fused depthwiseConv2d",s,i);const g=Qn(m.shape,h.shape,r,o,s,i,!0);let y,b;null!=u&&(y=ot(u,"bias","fused conv2d"),[y]=je(y,d),Gr(g.outShape,y.shape)),null!=p&&(b=ot(p,"prelu weights","fused depthwiseConv2d"));const w=(e,t)=>{_(nr(o),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[n,a,u,p]=t,c=Vo(e,u,l),d=jo(a.shape,c,n,r,s,o,i),h=qo(a,c,n.shape,r,s,o,i);if(null!=p){return[d,h,Ko(y,c)]}return[d,h]},N={x:m,filter:h,bias:y,preluActivationWeights:b},v={strides:r,pad:s,dataFormat:a,dilations:o,dimRoundingMode:i,activation:l,leakyreluAlpha:c};if(null==u){const e=Fs(((e,t,n)=>{let r=et.runKernel(ce,N,v);return n([t,e,r]),f&&(r=ar(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:w}}));return e(m,h)}{const e=Fs(((e,t,n,r)=>{let s=et.runKernel(ce,N,v);return r([t,e,s,n]),f&&(s=ar(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:w}}));return e(m,h,y)}}});const Jo=lt({fusedMatMul_:function(e){let{a:t,b:n,transposeA:r=!1,transposeB:s=!1,bias:a,activation:o="linear",preluActivationWeights:i,leakyreluAlpha:u=.2}=e;if(!1===Wo(et.state.gradientDepth,o)){let e=lr(t,n,r,s);return null!=a&&(e=Pn(e,a)),Uo(e,o,i,u)}let l=ot(t,"a","fused matMul"),p=ot(n,"b","fused matMul");[l,p]=je(l,p);const c=r?l.shape[l.rank-2]:l.shape[l.rank-1],d=s?p.shape[p.rank-1]:p.shape[p.rank-2],h=r?l.shape[l.rank-1]:l.shape[l.rank-2],m=s?p.shape[p.rank-2]:p.shape[p.rank-1],f=l.shape.slice(0,-2),g=p.shape.slice(0,-2),y=D(f),b=D(g);_(c===d,(()=>`Error in fused matMul: inner shapes (${c}) and (${d}) of Tensors with shapes ${l.shape} and ${p.shape} and transposeA=${r} and transposeB=${s} must match.`));const w=Gr(l.shape.slice(0,-2),p.shape.slice(0,-2)).concat([h,m]),N=ar(l,r?[y,c,h]:[y,h,c]),v=ar(p,s?[b,m,d]:[b,d,m]);let x,k;null!=a&&(x=ot(a,"bias","fused matMul"),[x]=je(x,l),Gr(w,x.shape)),null!=i&&(k=ot(i,"prelu weights","fused matMul"));const T=(e,t)=>{const[n,i,u,l]=t,p=Vo(ar(e,u.shape),u,o);let c,d;if(r||s?!r&&s?(c=lr(p,i,!1,!1),d=lr(p,n,!0,!1)):r&&!s?(c=lr(i,p,!1,!0),d=lr(n,p,!1,!1)):(c=lr(i,p,!0,!0),d=lr(p,n,!0,!0)):(c=lr(p,i,!1,!0),d=lr(n,p,!0,!1)),null!=a){return[c,d,Ko(l,p)]}return[c,d]},S={a:N,b:v,bias:x,preluActivationWeights:k},E={transposeA:r,transposeB:s,activation:o,leakyreluAlpha:u};if(null==a){const e=Fs(((e,t,n)=>{const r=et.runKernel(le,S,E);return n([e,t,r]),{value:ar(r,w),gradFunc:T}}));return e(N,v)}{const e=Fs(((e,t,n,r)=>{const s=et.runKernel(le,S,E);return r([e,t,s,n]),{value:ar(s,w),gradFunc:T}}));return e(N,v,x)}}});const Yo=lt({hammingWindow_:function(e){return Bo(e,.54,.46)}});const Qo=lt({hannWindow_:function(e){return Bo(e,.5,.5)}});const Zo=lt({frame_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,a=0;const o=[];for(;a+t<=e.size;)o.push(dr(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,i=ur([dr(e,a,t-r),Tr([r],s)]);o.push(i),a+=n}return 0===o.length?mo([],[0,t]):ar(ur(o),[o.length,t])}});const Xo=lt({stft_:function(e,t,n,r){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Qo;null==r&&(r=Lo(t));const a=Zo(e,t,n),o=pr(a,s(t));return ao(o,r)}});const ei=lt({cropAndResize_:function(e,t,n,r){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"bilinear",a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;const o=ot(e,"image","cropAndResize"),i=ot(t,"boxes","cropAndResize","float32"),u=ot(n,"boxInd","cropAndResize","int32"),l=i.shape[0];_(4===o.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`)),_(2===i.rank&&4===i.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${i.shape}.`)),_(1===u.rank&&u.shape[0]===l,(()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${i.shape}.`)),_(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),_(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),_("bilinear"===s||"nearest"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const p={image:o,boxes:i,boxInd:u},c={method:s,extrapolationValue:a,cropSize:r};return et.runKernel("CropAndResize",p,c)}});const ti=lt({flipLeftRight_:function(e){const t=ot(e,"image","flipLeftRight","float32");_(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return et.runKernel("FlipLeftRight",n,{})}});const ni=lt({grayscaleToRGB_:function(e){const t=ot(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];_(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),_(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const s=new Array(t.rank);return s.fill(1,0,n),s[n]=3,ys(t,s)}});const ri=lt({rotateWithOffset_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5;const s=ot(e,"image","rotateWithOffset","float32");_(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const a={image:s},o={radians:t,fillValue:n,center:r};return et.runKernel("RotateWithOffset",a,o)}});function si(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=e.shape[0];return n=Math.min(n,o),_(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),_(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),_(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),_(1===t.rank,(()=>"scores must be a 1D tensor")),_(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),_(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const ai=lt({nonMaxSuppression_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY;const a=ot(e,"boxes","nonMaxSuppression","float32"),o=ot(t,"scores","nonMaxSuppression","float32"),i=si(a,o,n,r,s);n=i.maxOutputSize,r=i.iouThreshold,s=i.scoreThreshold;const u={maxOutputSize:n,iouThreshold:r,scoreThreshold:s};return et.runKernel("NonMaxSuppressionV3",{boxes:a,scores:o},u)}});function oi(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,o=!1;for(;r<s;){a=r+(s-r>>>1);const i=n(t,e[a]);i>0?r=a+1:(s=a,o=!i)}return o?r:-r-1}(e,t,n||ii)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function ii(e,t){return e>t?1:e<t?-1:0}function ui(e,t,n,r,s,a){let o=arguments.length>6&&void 0!==arguments[6]&&arguments[6],i=arguments.length>7&&void 0!==arguments[7]&&arguments[7],u=arguments.length>8&&void 0!==arguments[8]&&arguments[8];const l=[];for(let g=0;g<t.length;g++)t[g]>s&&l.push({score:t[g],boxIndex:g,suppressBeginIndex:0});l.sort(ci);const p=a>0?-.5/a:0,c=[],d=[];for(;c.length<n&&l.length>0;){const t=l.pop(),{score:n,boxIndex:a,suppressBeginIndex:o}=t;if(n<s)break;let i=!1;for(let u=c.length-1;u>=o;--u){const n=li(e,a,c[u]);if(n>=r){i=!0;break}if(t.score=t.score*pi(r,p,n),t.score<=s)break}t.suppressBeginIndex=c.length,i||(t.score===n?(c.push(a),d.push(t.score)):t.score>s&&oi(l,t,ci))}const h=c.length,m=n-h;i&&m>0&&(c.push(...new Array(m).fill(0)),d.push(...new Array(m).fill(0)));const f={selectedIndices:c};return o&&(f.selectedScores=d),u&&(f.validOutputs=h),f}function li(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(s[0],s[2]),p=Math.min(s[1],s[3]),c=Math.max(s[0],s[2]),d=Math.max(s[1],s[3]),h=(i-a)*(u-o),m=(c-l)*(d-p);if(h<=0||m<=0)return 0;const f=Math.max(a,l),g=Math.max(o,p),y=Math.min(i,c),b=Math.min(u,d),w=Math.max(y-f,0)*Math.max(b-g,0);return w/(h+m-w)}function pi(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function ci(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const di=async function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY;const a=ot(e,"boxes","nonMaxSuppressionAsync"),o=ot(t,"scores","nonMaxSuppressionAsync"),i=si(a,o,n,r,s);n=i.maxOutputSize,r=i.iouThreshold,s=i.scoreThreshold;const u=await Promise.all([a.data(),o.data()]),l=u[0],p=u[1],{selectedIndices:c}=function(e,t,n,r,s){return ui(e,t,n,r,s,0)}(l,p,n,r,s);return a!==e&&a.dispose(),o!==t&&o.dispose(),ho(c,"int32")};const hi=lt({nonMaxSuppressionWithScore_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;const o=ot(e,"boxes","nonMaxSuppression"),i=ot(t,"scores","nonMaxSuppression"),u=si(o,i,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const l={boxes:o,scores:i},p={maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a},c=et.runKernel("NonMaxSuppressionV5",l,p);return{selectedIndices:c[0],selectedScores:c[1]}}});const mi=async function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;const o=ot(e,"boxes","nonMaxSuppressionAsync"),i=ot(t,"scores","nonMaxSuppressionAsync"),u=si(o,i,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const l=await Promise.all([o.data(),i.data()]),p=l[0],c=l[1],{selectedIndices:d,selectedScores:h}=function(e,t,n,r,s,a){return ui(e,t,n,r,s,a,!0)}(p,c,n,r,s,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:ho(d,"int32"),selectedScores:ho(h)}};const fi=lt({nonMaxSuppressionPadded_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,a=arguments.length>5&&void 0!==arguments[5]&&arguments[5];const o=ot(e,"boxes","nonMaxSuppression"),i=ot(t,"scores","nonMaxSuppression"),u=si(o,i,n,r,s,null),l={boxes:o,scores:i},p={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a},c=et.runKernel("NonMaxSuppressionV4",l,p);return{selectedIndices:c[0],validOutputs:c[1]}}});const gi=async function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,a=arguments.length>5&&void 0!==arguments[5]&&arguments[5];const o=ot(e,"boxes","nonMaxSuppressionAsync"),i=ot(t,"scores","nonMaxSuppressionAsync"),u=si(o,i,n,r,s,null),l=u.maxOutputSize,p=u.iouThreshold,c=u.scoreThreshold,[d,h]=await Promise.all([o.data(),i.data()]),{selectedIndices:m,validOutputs:f}=function(e,t,n,r,s,a){return ui(e,t,n,r,s,0,!1,a,!0)}(d,h,l,p,c,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:ho(m,"int32"),validOutputs:is(f,"int32")}};const yi=lt({resizeBilinear_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s=ot(e,"images","resizeBilinear");_(3===s.rank||4===s.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`)),_(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),_(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=ar(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},l=et.runKernel("ResizeBilinear",i,u);return o?ar(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const bi=lt({resizeNearestNeighbor_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s=ot(e,"images","resizeNearestNeighbor");_(3===s.rank||4===s.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`)),_(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),_("float32"===s.dtype||"int32"===s.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),_(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=s,o=!1;3===s.rank&&(o=!0,a=ar(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},l=et.runKernel("ResizeNearestNeighbor",i,u);return o?ar(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});const wi=lt({threshold_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"binary",n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5;const s=ot(e,"image","threshold"),a=s.shape[0]*s.shape[1];let o,i,u,l,p=pr(ho([r]),255);if(_(3===s.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`)),_(3===s.shape[2]||1===s.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`)),_("int32"===s.dtype||"float32"===s.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`)),_("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===s.shape[2]){[o,i,u]=so(s,[1,1,1],-1);const e=pr(o,.2989),t=pr(i,.587),n=pr(u,.114);l=Pn(Pn(e,t),n)}else l=e;if("otsu"===t){p=function(e,t){let n,r,s,a,o,i,u=ho([-1]),l=ho([0]),p=ho([0]);for(let c=0;c<e.size-1;c++){n=dr(e,0,c+1),r=dr(e,c+1),o=jr(ps(n),t),i=jr(ps(r),t);const d=ps(pr(n,Oa(0,n.size)));s=jr(d,ps(n));const h=Tr(r.shape,n.size),m=Pn(Oa(0,r.size),h),f=pr(r,m);a=jr(ps(f),ps(r));const g=Bs(s,a),y=Bs(s,a),b=pr(o,i);p=pr(pr(b,g),y);const w=vs(p,l);l=Yr(w,p,l),u=Yr(w,ho([c]),u)}return u}(Nr(mn(Ka(l),"int32"),dt([]),256),a)}const c=n?$s(l,p):vs(l,p);return mn(pr(c,255),"int32")}});const Ni=lt({transform_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"nearest",r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"constant",s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,a=arguments.length>5?arguments[5]:void 0;const o=ot(e,"image","transform","float32"),i=ot(t,"transforms","transform","float32");_(4===o.rank,(()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`)),_(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),_(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const u={image:o,transforms:i},l={interpolation:n,fillMode:r,fillValue:s,outputShape:a};return et.runKernel("Transform",u,l)}});const vi=lt({bandPart_:function(e,t,n){_(t%1===0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),_(n%1===0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=ot(e,"a","bandPart");_(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[a,o]=r.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=a),n<0&&(n=o);const i=ar(Oa(0,a,1,"int32"),[-1,1]),u=Oa(0,o,1,"int32"),l=Bs(i,u),p=Vs($s(l,is(+t,"int32")),xs(l,is(-n,"int32"))),c=Xs([a,o],r.dtype);return ar(uo(ko(ar(r,[-1,a,o])).map((e=>Yr(p,e,c)))),s)}});const xi=lt({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,_(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)_(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=so(e,e.shape[0],0).map((e=>io(e,[0])));_(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let s=0;s<e.length;++s)n.push(et.tidy((()=>{let e=r[s];if(s>0)for(let t=0;t<s;++t){const r=pr(ps(pr(n[t],e)),n[t]);e=Bs(e,r)}return jr(e,ds(e,"euclidean"))})));return t?uo(n,0):n}});function ki(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return et.tidy((()=>{_(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let s=bs(n),a=fn(e);const o=mo([[1]],[1,1]);let i=fn(o);const u=n>=r?r:n;for(let e=0;e<u;++e){const t=a,u=i,l=s;[i,a,s]=et.tidy((()=>{const t=dr(a,[e,e],[n-e,1]),u=ds(t),l=dr(a,[e,e],[1,1]),p=Yr(vs(l,0),mo([[-1]]),mo([[1]])),c=Bs(l,pr(p,u)),d=jr(t,c);i=1===d.shape[0]?fn(o):ur([o,dr(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);const h=Cs(jr(lr(p,c),u)),m=dr(a,[e,0],[n-e,r]),f=pr(h,i),g=Ao(i);if(0===e)a=Bs(m,lr(f,lr(g,m)));else{const t=Bs(m,lr(f,lr(g,m)));a=ur([dr(a,[0,0],[e,r]),t],0)}const y=Ao(f),b=dr(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=Bs(b,lr(lr(b,i),y));else{const t=Bs(b,lr(lr(b,i),y));s=ur([dr(s,[0,0],[n,e]),t],1)}return[i,a,s]})),Ge([t,u,l]).forEach((e=>e.dispose()))}return!t&&n>r&&(s=dr(s,[0,0],[n,r]),a=dr(a,[0,0],[r,r])),[s,a]}))}const Ti=lt({qr_:function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(_(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return ki(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=ko(ar(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];r.forEach((e=>{const[n,r]=ki(e,t);s.push(n),a.push(r)}));return[ar(uo(s,0),e.shape),ar(uo(a,0),e.shape)]}}});var Si;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Si||(Si={}));const Ei=lt({computeWeightedLoss_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Si.SUM_BY_NONZERO_WEIGHTS;const r=ot(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=ot(t,"weights","computeWeightedLoss"));const a=null==s?r:pr(r,s);if(n===Si.NONE)return a;if(n===Si.SUM)return ps(a);if(n===Si.MEAN){if(null==s)return Zs(a);{const e=r.size/s.size,t=jr(ps(a),ps(s));return e>1?jr(t,is(e)):t}}if(n===Si.SUM_BY_NONZERO_WEIGHTS){if(null==s)return jr(ps(a),is(r.size));{const e=pr(s,ea(r.shape)),t=mn(ps(ua(e,is(0))),"float32");return jr(ps(a),t)}}throw Error(`Unknown reduction: ${n}`)}});const _i=lt({absoluteDifference_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Si.SUM_BY_NONZERO_WEIGHTS;const s=ot(e,"labels","absoluteDifference"),a=ot(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=ot(n,"weights","absoluteDifference")),I(s.shape,a.shape,"Error in absoluteDifference: ");const i=Ln(Bs(s,a));return Ei(i,o,r)}});const Ii=lt({cosineDistance_:function(e,t,n,r){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Si.SUM_BY_NONZERO_WEIGHTS;const a=ot(e,"labels","cosineDistance"),o=ot(t,"predictions","cosineDistance");let i=null;null!=r&&(i=ot(r,"weights","cosineDistance")),I(a.shape,o.shape,"Error in cosineDistance: ");const u=is(1),l=Bs(u,ps(pr(a,o),n,!0));return Ei(l,i,s)}});const $i=lt({hingeLoss_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Si.SUM_BY_NONZERO_WEIGHTS,s=ot(e,"labels","hingeLoss");const a=ot(t,"predictions","hingeLoss");let o=null;null!=n&&(o=ot(n,"weights","hingeLoss")),I(s.shape,a.shape,"Error in hingeLoss: ");const i=is(1);s=Bs(pr(is(2),s),i);const u=Ca(Bs(i,pr(s,a)));return Ei(u,o,r)}});const Ai=lt({huberLoss_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Si.SUM_BY_NONZERO_WEIGHTS;const a=ot(e,"labels","huberLoss"),o=ot(t,"predictions","huberLoss");let i=null;null!=n&&(i=ot(n,"weights","huberLoss")),I(a.shape,o.shape,"Error in huberLoss: ");const u=is(r),l=Ln(Bs(o,a)),p=na(l,u),c=Bs(l,p),d=Pn(pr(is(.5),ls(p)),pr(u,c));return Ei(d,i,s)}});const Di=lt({logLoss_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1e-7,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Si.SUM_BY_NONZERO_WEIGHTS;const a=ot(e,"labels","logLoss"),o=ot(t,"predictions","logLoss");let i=null;null!=n&&(i=ot(n,"weights","logLoss")),I(a.shape,o.shape,"Error in logLoss: ");const u=is(1),l=is(r),p=Cs(pr(a,Os(Pn(o,l)))),c=pr(Bs(u,a),Os(Pn(Bs(u,o),l))),d=Bs(p,c);return Ei(d,i,s)}});const Oi=lt({meanSquaredError_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Si.SUM_BY_NONZERO_WEIGHTS;const s=ot(e,"labels","meanSquaredError"),a=ot(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=ot(n,"weights","meanSquaredError")),I(s.shape,a.shape,"Error in meanSquaredError: ");const i=oo(s,a);return Ei(i,o,r)}});const Mi=lt({sigmoidCrossEntropy_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Si.SUM_BY_NONZERO_WEIGHTS,a=ot(e,"multiClassLabels","sigmoidCrossEntropy");const o=ot(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=ot(n,"weights","sigmoidCrossEntropy")),I(a.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=is(r),t=is(1),n=is(.5);a=Pn(pr(a,Bs(t,e)),pr(n,e))}const u=function(e,t){const n=ot(e,"labels","sigmoidCrossEntropyWithLogits"),r=ot(t,"logits","sigmoidCrossEntropyWithLogits");I(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=Ca(r),a=pr(r,n),o=Ms(ms(Cs(Ln(r))));return Pn(Bs(s,a),o)}(a,o);return Ei(u,i,s)}});const Fi=lt({softmaxCrossEntropy_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Si.SUM_BY_NONZERO_WEIGHTS,a=ot(e,"onehotLabels","softmaxCrossEntropy");const o=ot(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=ot(n,"weights","softmaxCrossEntropy")),I(a.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=is(r),t=is(1),n=is(a.shape[1]);a=Pn(pr(a,Bs(t,e)),jr(e,n))}const u=function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1;if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const r=Fs(((e,t,r)=>{const s=Ps(t,[n],!0),a=Bs(mn(t,"float32"),s);r([e,a]);const o=Cs(pr(a,e));return{value:ps(o,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=rs(e.shape,[n]);return[pr(ar(e,a),Bs(mn(r,"float32"),ms(s))),pr(ar(e,a),Bs(ms(s),mn(r,"float32")))]}}}));return r(e,t)}(a,o);return Ei(u,i,s)}});const Ci=lt({sparseFillEmptyRows_:function(e,t,n,r){const s=ot(e,"indices","sparseFillEmptyRows","int32"),a=ot(t,"values","sparseFillEmptyRows"),o=ot(n,"denseShape","sparseFillEmptyRows","int32"),i=ot(r,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==s.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const u={indices:s,values:a,denseShape:o,defaultValue:i},l=et.runKernel("SparseFillEmptyRows",u);return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}});const Ri=lt({sparseReshape_:function(e,t,n){const r=ot(e,"inputIndices","sparseReshape","int32"),s=ot(t,"inputShape","sparseReshape","int32"),a=ot(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==s.rank)throw new Error(`Input shape should be Tensor1D but received shape ${s.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const o={inputIndices:r,inputShape:s,newShape:a},i=et.runKernel("SparseReshape",o);return{outputIndices:i[0],outputShape:i[1]}}});const Li=lt({sparseSegmentMean_:function(e,t,n){const r=ot(e,"data","sparseSegmentMean"),s=ot(t,"indices","sparseSegmentMean","int32"),a=ot(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return et.runKernel("SparseSegmentMean",o)}});const Bi=lt({sparseSegmentSum_:function(e,t,n){const r=ot(e,"data","sparseSegmentSum"),s=ot(t,"indices","sparseSegmentSum","int32"),a=ot(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return et.runKernel("SparseSegmentSum",o)}});const zi=lt({stringNGrams_:function(e,t,n,r,s,a,o,i){const u=ot(e,"data","stringNGrams","string");if("string"!==u.dtype)throw new Error("Data must be of datatype string");if(1!==u.shape.length)throw new Error(`Data must be a vector, saw: ${u.shape}`);const l=ot(t,"dataSplits","stringNGrams");if("int32"!==l.dtype)throw new Error("Data splits must be of datatype int32");const p={separator:n,nGramWidths:r,leftPad:s,rightPad:a,padWidth:o,preserveShortSequences:i},c={data:u,dataSplits:l},d=et.runKernel("StringNGrams",c,p);return{nGrams:d[0],nGramsSplits:d[1]}}});const Pi=lt({stringSplit_:function(e,t){let n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];const r=ot(e,"input","stringSplit","string"),s=ot(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==s.rank)throw new Error(`Delimiter should be a scalar but received shape ${s.shape}`);const a={skipEmpty:n},o={input:r,delimiter:s},i=et.runKernel("StringSplit",o,a);return{indices:i[0],values:i[1],shape:i[2]}}});const Vi=lt({stringToHashBucketFast_:function(e,t){const n=ot(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const s={input:n};return et.runKernel("StringToHashBucketFast",s,r)}}),Ki={fft:to,ifft:no,rfft:ao,irfft:ro},Ui={hammingWindow:Yo,hannWindow:Qo,frame:Zo,stft:Xo},Wi={flipLeftRight:ti,grayscaleToRGB:ni,resizeNearestNeighbor:bi,resizeBilinear:yi,rotateWithOffset:ri,cropAndResize:ei,nonMaxSuppression:ai,nonMaxSuppressionAsync:di,nonMaxSuppressionWithScore:hi,nonMaxSuppressionWithScoreAsync:mi,nonMaxSuppressionPadded:fi,nonMaxSuppressionPaddedAsync:gi,threshold:wi,transform:Ni},Hi={bandPart:vi,gramSchmidt:xi,qr:Ti},qi={absoluteDifference:_i,computeWeightedLoss:Ei,cosineDistance:Ii,hingeLoss:$i,huberLoss:Ai,logLoss:Di,meanSquaredError:Oi,sigmoidCrossEntropy:Mi,softmaxCrossEntropy:Fi},ji={sparseFillEmptyRows:Ci,sparseReshape:Ri,sparseSegmentMean:Li,sparseSegmentSum:Bi},Gi={stringNGrams:zi,stringSplit:Pi,stringToHashBucketFast:Vi};var Ji,Yi;Q().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(Ji||(Ji={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(Yi||(Yi={}));const Qi={};function Zi(e){return Qi[e]}function Xi(e,t,n,r,s){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,o=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return eu(t.inputNames[a.inputIndexStart],n,r,s);if("tensors"===a.type){return t.inputNames.slice(e,o).map((e=>eu(e,n,r,s)))}const i=eu(t.inputNames.slice(e)[0],n,r,s),u=i.dataSync();return"number"===a.type?u[0]:U(i.shape,u)}const o=t.attrParams[e];return o&&o.value}function eu(e,t,n,r){const[s,a]=ru(e);if(null!=r){const e=r.getHashTableHandleByName(s);if(null!=e)return e}const o=n.currentContextIds.find((e=>!!t[nu(s,e)]));return void 0!==o?t[nu(s,o)][a]:void 0}function tu(e,t){const[n,r,s]=ru(e);return[nu(n,t&&t.currentContextId),r,s]}function nu(e,t){return t?`${e}-${t}`:e}function ru(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],r=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),r]}function su(e,t,n){let r=Xi("pad",e,t,n);if("explicit"===r){r=Xi("explicitPaddings",e,t,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)s[e][0]=r[2*e],s[e][1]=r[2*e+1];return s}return r}function au(e){return e.kept?e:fn(e)}const ou=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],iu=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],uu=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],lu=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],pu=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],cu=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],du=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],hu=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],mu=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}],fu=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],gu=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],yu=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}],bu=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],wu=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],Nu=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],vu=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],xu=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],ku=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],Tu=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class Su{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[a,o,i,u,l,p,c,d,h,m,f,g,y,b,w,N,v,x,k].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=e.node,r=[],s=[],a=[],o=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?s.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let i=[];const u=[];let l={},p={};null!=t&&(l=this.mapSignatureEntries(t.inputs),p=this.mapSignatureEntries(t.outputs));const c=Object.keys(o);c.forEach((e=>{const t=o[e];t.inputNames.forEach(((e,n)=>{const[r,,s]=tu(e),a=o[r];if(null!=a.outputs){const e=a.outputs.indexOf(s);if(-1!==e){const s=`${r}:${e}`;t.inputNames[n]=s}}t.inputs.push(a),a.children.push(t)}))})),0===Object.keys(p).length?c.forEach((e=>{const t=o[e];0===t.children.length&&u.push(t)})):Object.keys(p).forEach((e=>{const[t]=tu(e),n=o[t];null!=n&&(n.signatureKey=p[e],u.push(n))})),Object.keys(l).length>0?Object.keys(l).forEach((e=>{const[t]=tu(e),n=o[t];n&&(n.signatureKey=l[e],i.push(n))})):i=r;let d={};null!=e.library&&null!=e.library.function&&(d=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const h={nodes:o,inputs:i,outputs:u,weights:s,placeholders:r,signature:t,functions:d};return a.length>0&&(h.initNodes=a),h}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=Zi(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const r=n.type;let s;switch(n.type){case"string":s=_u(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=_u(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=Lu(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Lu(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=$u(e.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=$u(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=Ru(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Ru(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=Iu(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Iu(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=zu(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=zu(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=Cu(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Cu(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=Bu(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Bu(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=Ou(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Ou(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=Mu(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Mu(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=Du(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Du(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:s,type:r},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const s=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=tu(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Au(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,s.push(n),r[t]=n}));Object.keys(r).forEach((e=>{const t=r[e];t.inputNames.forEach(((e,n)=>{const[s,,a]=tu(e),o=r[s];if(null!=o.outputs){const e=o.outputs.indexOf(a);if(-1!==e){const r=`${s}:${e}`;t.inputNames[n]=r}}t.inputs.push(o),o.children.push(t)}))}));const o=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=tu(o[e.name]),s=r[t];null!=s&&(s.defaultOutput=n,a.push(s))}));const i=this.mapArgsToSignature(e);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function Eu(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=Q().global;if("undefined"!==typeof t.atob)return t.atob(e);if("undefined"!==typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function _u(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s=e[t];return null!=s?Eu(s.s,r):n}function Iu(e,t,n){const r=e[t];return r?r.b:n}function $u(e,t,n){const r=e[t]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"===typeof s?s:parseInt(s,10)}function Au(e){switch("string"===typeof e&&(e=Ji[e]),e){case Ji.DT_FLOAT:case Ji.DT_HALF:return"float32";case Ji.DT_INT32:case Ji.DT_INT64:case Ji.DT_INT8:case Ji.DT_UINT8:return"int32";case Ji.DT_BOOL:return"bool";case Ji.DT_DOUBLE:return"float32";case Ji.DT_STRING:return"string";default:return null}}function Du(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function Ou(e,t,n){const r=e[t];return r&&r.type?Au(r.type):n}function Mu(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map((e=>Au(e))):n}function Fu(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"===typeof e.size?e.size:parseInt(e.size,10))):[]}function Cu(e,t,n){const r=e[t];return r&&r.shape?Fu(r.shape):n}function Ru(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((e=>"number"===typeof e?e:parseInt(e,10))):n}function Lu(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s=e[t];return s&&s.list&&s.list.s?s.list.s.map((e=>Eu(e,r))):n}function Bu(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map((e=>Fu(e))):n}function zu(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class Pu{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return eu(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return eu(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return $u(this.node.rawAttrs,e,t);if(null!=n.s)return _u(this.node.rawAttrs,e,t);if(null!=n.b)return Iu(this.node.rawAttrs,e,t);if(null!=n.shape)return Cu(this.node.rawAttrs,e,t);if(null!=n.type)return Ou(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Ru(this.node.rawAttrs,e,t);if(null!=n.list.s)return Lu(this.node.rawAttrs,e,t);if(null!=n.list.shape)return Bu(this.node.rawAttrs,e,t);if(null!=n.list.b)return zu(this.node.rawAttrs,e,t);if(null!=n.list.type)return Mu(this.node.rawAttrs,e,t)}return t}}function Vu(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";if("number"!==typeof e&&"number"!==typeof t){_(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let r=0;r<e.length;r++){const s=e[r],a=t[r];_(s<0||a<0||s===a,(()=>n+` Shapes ${e} and ${t} must match`))}}}function Ku(e){return"number"!==typeof e&&!e.some((e=>e<0))}function Uu(e,t,n){let r=Wu(e,n);const s=!Ku(r);if(s&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(s&&t.forEach((e=>{r=Wu(e.shape,r)})),!Ku(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function Wu(e,t){if("number"===typeof e)return t;if("number"===typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let r=0;r<e.length;++r){const s=e[r],a=t[r];if(s>=0&&a>=0&&s!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[r]=s>=0?s:a}return n}class Hu{constructor(e,t,n,r,s,a,o){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=is(0),$o(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),Vu(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,$o(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return dt([],[0].concat(this.elementShape));const n=this.readMany(e);return Vu(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),uo(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return dt([],[0].concat(this.elementShape));const t=[];for(let r=0;r<this.size();r++)t.push(r);const n=this.readMany(t);return Vu(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),ur(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,ko(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:t.size/n,a=[];Io((()=>{t=ar(t,[1,n,s]);for(let n=0;n<e.length;++n){const o=[0,0===n?0:r[n-1],0],i=[1,e[n],s];a[n]=ar(dr(t,o,i),this.elementShape)}return a}));const o=[];for(let i=0;i<e.length;i++)o[i]=i;this.writeMany(o,a)}}class qu{constructor(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:-1;this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);Vu(t,e.shape,"TensorList shape mismatch: "),$o(e)})),this.idTensor=is(0),this.maxNumElements=r,$o(this.idTensor)}get id(){return this.idTensor.id}copy(){return new qu([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1;if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);Vu(e,this.elementShape,"TensorList shape mismatch: ");const r=Uu(this.elementShape,this.tensors,e);return Io((()=>{const e=this.tensors.map((e=>ar(e,r)));return uo(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=Uu(this.elementShape,this.tensors,e),r=this.tensors.pop();return r.kept=!1,Vu(r.shape,e,"TensorList shape mismatch: "),ar(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(Vu(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");$o(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new qu([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);Vu(this.tensors[e].shape,t,"TensorList shape mismatch: ");const r=Uu(this.elementShape,this.tensors,t);return ar(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);Vu(this.elementShape,t.shape,"TensorList shape mismatch: "),$o(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);Vu(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const r=Uu(this.elementShape,this.tensors,n);return 0===e.length?dt([],[0].concat(r)):Io((()=>{const t=e.map((e=>ar(this.tensors[e],r)));return uo(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);Vu(this.elementShape,t,"TensorList shape mismatch: ");const n=Uu(this.elementShape,this.tensors,t);return 0===this.size()?dt([],[0].concat(n)):Io((()=>{const e=this.tensors.map((e=>ar(e,n)));return ur(e,0)}))}}const ju=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=Xi("thenBranch",e,t,n),s=Xi("elseBranch",e,t,n),a=Xi("cond",e,t,n),o=Xi("args",e,t,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=Xi("body",e,t,n),s=Xi("cond",e,t,n),a=Xi("args",e,t,n),o=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),i=a.map((e=>e.id));let u=await o[0].data();o.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()}));let l=a;for(;u[0];){const e=l;l=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const t=l.map((e=>e.id));e.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[s].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);u=await a[0].data(),a.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return l}case"LoopCond":return[au(Xi("pred",e,t,n))];case"Switch":{const r=Xi("pred",e,t,n);let s=Xi("data",e,t,n);return s.kept||(s=au(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=e.inputNames.find((e=>void 0!==eu(e,t,n)));if(r){return[au(eu(r,t,n))]}return}case"Enter":{const r=Xi("frameName",e,t,n),s=Xi("tensor",e,t,n);return n.enterFrame(r),[au(s)]}case"Exit":{const r=Xi("tensor",e,t,n);return n.exitFrame(),[au(r)]}case"NextIteration":{const r=Xi("tensor",e,t,n);return n.nextIteration(),[au(r)]}case"TensorArrayV3":{const r=Xi("size",e,t,n),s=Xi("dtype",e,t,n),a=Xi("elementShape",e,t,n),o=Xi("dynamicSize",e,t,n),i=Xi("clearAfterRead",e,t,n),u=Xi("identicalElementShapes",e,t,n),l=Xi("name",e,t,n),p=new Hu(l,s,r,a,u,o,i);return n.addTensorArray(p),[p.idTensor,is(1)]}case"TensorArrayWriteV3":{const r=Xi("tensorArrayId",e,t,n),s=Xi("index",e,t,n),a=Xi("tensor",e,t,n),o=n.getTensorArray(r.id);return o.write(s,a),[o.idTensor]}case"TensorArrayReadV3":{const r=Xi("tensorArrayId",e,t,n),s=Xi("index",e,t,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=Xi("tensorArrayId",e,t,n),s=Xi("indices",e,t,n),a=Xi("dtype",e,t,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=Xi("tensorArrayId",e,t,n),s=Xi("indices",e,t,n),a=Xi("tensor",e,t,n),o=n.getTensorArray(r.id);return o.scatter(s,a),[o.idTensor]}case"TensorArrayConcatV3":{const r=Xi("tensorArrayId",e,t,n),s=n.getTensorArray(r.id),a=Xi("dtype",e,t,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=Xi("tensorArrayId",e,t,n),s=Xi("tensor",e,t,n),a=Xi("lengths",e,t,n),o=n.getTensorArray(r.id);return o.split(a,s),[o.idTensor]}case"TensorArraySizeV3":{const r=Xi("tensorArrayId",e,t,n);return[is(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=Xi("tensorArrayId",e,t,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=Xi("tensorListId",e,t,n),s=Xi("index",e,t,n),a=Xi("tensor",e,t,n),o=n.getTensorList(r.id);return o.setItem(s,a),[o.idTensor]}case"TensorListGetItem":{const r=Xi("tensorListId",e,t,n),s=Xi("index",e,t,n),a=Xi("elementShape",e,t,n),o=Xi("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(s,a,o)]}case"TensorListScatterV2":case"TensorListScatter":{const r=Xi("indices",e,t,n),s=function(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new qu([],n,e.dtype,r),o=ko(e,0);return t.forEach(((e,t)=>{a.setItem(e,o[t])})),a}(Xi("tensor",e,t,n),r,Xi("elementShape",e,t,n),Xi("numElements",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=Xi("elementShape",e,t,n),s=Xi("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=Xi(a,e,t,n),i=function(e,t,n,r){return new qu([],e,t,r)}(r,s,0,"TensorListReserve"===e.op?-1:o);return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const r=Xi("tensorListId",e,t,n),s=Xi("indices",e,t,n),a=Xi("elementShape",e,t,n),o=Xi("elementDType",e,t,n);return[n.getTensorList(r.id).gather(s,o,a)]}case"TensorListStack":{const r=Xi("tensorListId",e,t,n),s=Xi("elementShape",e,t,n),a=Xi("elementDType",e,t,n),o=Xi("numElements",e,t,n);return[n.getTensorList(r.id).stack(s,a,o)]}case"TensorListFromTensor":{const r=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);Vu(e.shape.slice(1),t,"TensorList shape mismatch: ");const s=ko(e);return new qu(s,t,r)}(Xi("tensor",e,t,n),Xi("elementShape",e,t,n),Xi("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=Xi("tensorListId",e,t,n),s=n.getTensorList(r.id),a=Xi("dtype",e,t,n),o=Xi("elementShape",e,t,n);return[s.concat(a,o)]}case"TensorListPushBack":{const r=Xi("tensorListId",e,t,n),s=Xi("tensor",e,t,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=Xi("tensorListId",e,t,n),s=Xi("elementShape",e,t,n),a=Xi("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=Xi("tensor",e,t,n),s=Xi("elementShape",e,t,n),a=function(e,t,n){let r=0;const s=t.map((e=>(r+=e,r)));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const a=Wu(e.shape.slice(1),n),o=0===r?0:e.size/r,i=Io((()=>{const n=[];e=ar(e,[1,r,o]);for(let r=0;r<t.length;++r){const i=[0,0===r?0:s[r-1],0],u=[1,t[r],o];n[r]=ar(dr(e,i,u),a)}return e.dispose(),n})),u=new qu([],n,e.dtype,t.length);for(let l=0;l<i.length;l++)u.setItem(l,i[l]);return u}(r,Xi("lengths",e,t,n),s);return n.addTensorList(a),[a.idTensor]}case"TensorListLength":{const r=Xi("tensorListId",e,t,n);return[is(n.getTensorList(r.id).size(),"int32")]}case"TensorListResize":{const r=Xi("tensorListId",e,t,n),s=Xi("size",e,t,n),a=n.getTensorList(r.id).resize(s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function Gu(e,t,n){const[r,s]=Xi("fusedOps",e,t,n),a="biasadd"===r,o=!a,i="prelu"===s,u="fusedbatchnorm"===r,l=Xi("numArgs",e,t,n);if(a){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&a&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(u)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const p=Xi("strides",e,t,n),c=su(e,t,n),d=Xi("dataFormat",e,t,n).toUpperCase(),h=Xi("dilations",e,t,n);let[m,f]=Xi("args",e,t,n);o&&(f=m,m=void 0);return{stride:p,pad:c,dataFormat:d,dilations:h,biasArg:m,preluArg:f,activationFunc:s,leakyreluAlpha:Xi("leakyreluAlpha",e,t,n)}}function Ju(e,t,n){return{boxes:Xi("boxes",e,t,n),scores:Xi("scores",e,t,n),maxOutputSize:Xi("maxOutputSize",e,t,n),iouThreshold:Xi("iouThreshold",e,t,n),scoreThreshold:Xi("scoreThreshold",e,t,n),softNmsSigma:Xi("softNmsSigma",e,t,n)}}class Yu{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=is(0),this.tensorMap=new Map,$o(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return is(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),Io((()=>{const e=ko(t),r=n.length,s=e.length;_(r===s,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${s} elements.`));for(let t=0;t<r;t++){const r=n[t],s=e[t];$o(s),this.tensorMap.set(r,s)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return Io((()=>{const e=[];for(let r=0;r<n.length;r++){const s=n[r],a=this.findWithDefault(s,t);e.push(a)}return uo(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function Qu(e,t,n,r){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Io;const a=((e,t,n)=>{switch(e.category){case"arithmetic":return s((()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:T;switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[r.add(Xi("a",e,t,n),Xi("b",e,t,n))];case"AddN":return[r.addN(Xi("tensors",e,t,n))];case"FloorMod":case"Mod":return[r.mod(Xi("a",e,t,n),Xi("b",e,t,n))];case"Mul":return[r.mul(Xi("a",e,t,n),Xi("b",e,t,n))];case"RealDiv":case"Div":return[r.div(Xi("a",e,t,n),Xi("b",e,t,n))];case"DivNoNan":return[r.divNoNan(Xi("a",e,t,n),Xi("b",e,t,n))];case"FloorDiv":return[r.floorDiv(Xi("a",e,t,n),Xi("b",e,t,n))];case"Sub":return[r.sub(Xi("a",e,t,n),Xi("b",e,t,n))];case"Minimum":return[r.minimum(Xi("a",e,t,n),Xi("b",e,t,n))];case"Maximum":return[r.maximum(Xi("a",e,t,n),Xi("b",e,t,n))];case"Pow":return[r.pow(Xi("a",e,t,n),Xi("b",e,t,n))];case"SquaredDifference":return[r.squaredDifference(Xi("a",e,t,n),Xi("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"basic_math":return s((()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:T;switch(e.op){case"Abs":case"ComplexAbs":return[r.abs(Xi("x",e,t,n))];case"Acos":return[r.acos(Xi("x",e,t,n))];case"Acosh":return[r.acosh(Xi("x",e,t,n))];case"Asin":return[r.asin(Xi("x",e,t,n))];case"Asinh":return[r.asinh(Xi("x",e,t,n))];case"Atan":return[r.atan(Xi("x",e,t,n))];case"Atan2":return[r.atan2(Xi("x",e,t,n),Xi("y",e,t,n))];case"Atanh":return[r.atanh(Xi("x",e,t,n))];case"Ceil":return[r.ceil(Xi("x",e,t,n))];case"Complex":return[r.complex(Xi("real",e,t,n),Xi("imag",e,t,n))];case"Cos":return[r.cos(Xi("x",e,t,n))];case"Cosh":return[r.cosh(Xi("x",e,t,n))];case"Elu":return[r.elu(Xi("x",e,t,n))];case"Erf":return[r.erf(Xi("x",e,t,n))];case"Exp":return[r.exp(Xi("x",e,t,n))];case"Expm1":return[r.expm1(Xi("x",e,t,n))];case"Floor":return[r.floor(Xi("x",e,t,n))];case"Log":return[r.log(Xi("x",e,t,n))];case"Log1p":return[r.log1p(Xi("x",e,t,n))];case"Imag":return[r.imag(Xi("x",e,t,n))];case"Neg":return[r.neg(Xi("x",e,t,n))];case"Reciprocal":return[r.reciprocal(Xi("x",e,t,n))];case"Real":return[r.real(Xi("x",e,t,n))];case"Relu":return[r.relu(Xi("x",e,t,n))];case"Round":return[r.round(Xi("x",e,t,n))];case"Selu":return[r.selu(Xi("x",e,t,n))];case"Sigmoid":return[r.sigmoid(Xi("x",e,t,n))];case"Sin":return[r.sin(Xi("x",e,t,n))];case"Sign":return[r.sign(Xi("x",e,t,n))];case"Sinh":return[r.sinh(Xi("x",e,t,n))];case"Softplus":return[r.softplus(Xi("x",e,t,n))];case"Sqrt":return[r.sqrt(Xi("x",e,t,n))];case"Square":return[r.square(Xi("x",e,t,n))];case"Tanh":return[r.tanh(Xi("x",e,t,n))];case"Tan":return[r.tan(Xi("x",e,t,n))];case"ClipByValue":return[r.clipByValue(Xi("x",e,t,n),Xi("clipValueMin",e,t,n),Xi("clipValueMax",e,t,n))];case"Relu6":return[r.relu6(Xi("x",e,t,n))];case"Rsqrt":return[r.rsqrt(eu(e.inputNames[0],t,n))];case"Prod":return[r.prod(Xi("x",e,t,n),Xi("axes",e,t,n))];case"LeakyRelu":return[r.leakyRelu(Xi("x",e,t,n),Xi("alpha",e,t,n))];case"Prelu":return[r.prelu(Xi("x",e,t,n),Xi("alpha",e,t,n))];case"IsNan":return[r.isNaN(eu(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"control":return ju(e,t,n);case"convolution":return s((()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:T;switch(e.op){case"Conv1D":{const s=Xi("stride",e,t,n),a=Xi("pad",e,t,n),o=Xi("dataFormat",e,t,n).toUpperCase(),i=Xi("dilation",e,t,n);return[r.conv1d(Xi("x",e,t,n),Xi("filter",e,t,n),s,a,o,i)]}case"Conv2D":{const s=Xi("strides",e,t,n),a=su(e,t,n),o=Xi("dataFormat",e,t,n).toUpperCase(),i=Xi("dilations",e,t,n);return[r.conv2d(Xi("x",e,t,n),Xi("filter",e,t,n),[s[1],s[2]],a,o,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:a,dataFormat:o,dilations:i,biasArg:u,preluArg:l,activationFunc:p,leakyreluAlpha:c}=Gu(e,t,n);return[r.fused.conv2d({x:Xi("x",e,t,n),filter:Xi("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:u,activation:p,preluActivationWeights:l,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:a,dataFormat:o,dilations:i,biasArg:u,preluArg:l,activationFunc:p,leakyreluAlpha:c}=Gu(e,t,n);return[r.fused.depthwiseConv2d({x:Xi("x",e,t,n),filter:Xi("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:u,activation:p,preluActivationWeights:l,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=Xi("outputShape",e,t,n),a=Xi("strides",e,t,n),o=su(e,t,n);return[r.conv2dTranspose(Xi("x",e,t,n),Xi("filter",e,t,n),s,[a[1],a[2]],o)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=Xi("strides",e,t,n),a=su(e,t,n),o=Xi("dilations",e,t,n),i=Xi("dataFormat",e,t,n).toUpperCase();return[r.depthwiseConv2d(Xi("input",e,t,n),Xi("filter",e,t,n),[s[1],s[2]],a,i,[o[1],o[2]])]}case"Conv3D":{const s=Xi("strides",e,t,n),a=Xi("pad",e,t,n),o=Xi("dataFormat",e,t,n).toUpperCase(),i=Xi("dilations",e,t,n);return[r.conv3d(Xi("x",e,t,n),Xi("filter",e,t,n),[s[1],s[2],s[3]],a,o,[i[1],i[2],i[3]])]}case"AvgPool":{const s=Xi("strides",e,t,n),a=Xi("pad",e,t,n),o=Xi("kernelSize",e,t,n);return[r.avgPool(Xi("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a)]}case"MaxPool":{const s=Xi("strides",e,t,n),a=Xi("pad",e,t,n),o=Xi("kernelSize",e,t,n);return[r.maxPool(Xi("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a)]}case"MaxPoolWithArgmax":{const s=Xi("strides",e,t,n),a=Xi("pad",e,t,n),o=Xi("kernelSize",e,t,n),i=Xi("includeBatchInIndex",e,t,n),{result:u,indexes:l}=r.maxPoolWithArgmax(Xi("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a,i);return[u,l]}case"AvgPool3D":{const s=Xi("strides",e,t,n),a=Xi("pad",e,t,n),o=Xi("kernelSize",e,t,n);return[r.avgPool3d(Xi("x",e,t,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],a)]}case"MaxPool3D":{const s=Xi("strides",e,t,n),a=Xi("pad",e,t,n),o=Xi("kernelSize",e,t,n);return[r.maxPool3d(Xi("x",e,t,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],a)]}case"Dilation2D":{const s=Xi("strides",e,t,n),a=Xi("pad",e,t,n),o=Xi("dilations",e,t,n),i=s[1],u=s[2],l=o[1],p=o[2];return[r.dilation2d(Xi("x",e,t,n),Xi("filter",e,t,n),[i,u],a,[l,p],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"creation":return s((()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:T;switch(e.op){case"Fill":{const s=Xi("shape",e,t,n),a=Xi("dtype",e,t,n),o=Xi("value",e,t,n);return[r.fill(s,o,a)]}case"LinSpace":{const s=Xi("start",e,t,n),a=Xi("stop",e,t,n),o=Xi("num",e,t,n);return[r.linspace(s,a,o)]}case"Multinomial":{const s=Xi("logits",e,t,n),a=Xi("numSamples",e,t,n),o=Xi("seed",e,t,n);return[r.multinomial(s,a,o)]}case"OneHot":{const s=Xi("indices",e,t,n),a=Xi("depth",e,t,n),o=Xi("onValue",e,t,n),i=Xi("offValue",e,t,n),u=Xi("dtype",e,t,n);return[r.oneHot(s,a,o,i,u)]}case"Ones":return[r.ones(Xi("shape",e,t,n),Xi("dtype",e,t,n))];case"OnesLike":return[r.onesLike(Xi("x",e,t,n))];case"RandomStandardNormal":return[r.randomStandardNormal(Xi("shape",e,t,n),Xi("dtype",e,t,n),Xi("seed",e,t,n))];case"RandomUniform":return[r.randomUniform(Xi("shape",e,t,n),Xi("minval",e,t,n),Xi("maxval",e,t,n),Xi("dtype",e,t,n))];case"Range":{const s=Xi("start",e,t,n),a=Xi("stop",e,t,n),o=Xi("step",e,t,n);return[r.range(s,a,o,Xi("dtype",e,t,n))]}case"TruncatedNormal":{const s=Xi("shape",e,t,n),a=Xi("mean",e,t,n),o=Xi("stdDev",e,t,n),i=Xi("seed",e,t,n);return[r.truncatedNormal(s,a,o,Xi("dtype",e,t,n),i)]}case"Zeros":return[r.zeros(Xi("shape",e,t,n),Xi("dtype",e,t,n))];case"ZerosLike":return[r.zerosLike(Xi("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"dynamic":return async function(e,t,n,r){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:T;switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:u,softNmsSigma:l}=Ju(e,t,n),p=await s.image.nonMaxSuppressionWithScoreAsync(r,a,o,i,u,l);return[p.selectedIndices,p.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=Ju(e,t,n),l=Xi("padToMaxOutputSize",e,t,n),p=await s.image.nonMaxSuppressionPaddedAsync(r,a,o,i,u,l);return[p.selectedIndices,p.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=Ju(e,t,n);return[await s.image.nonMaxSuppressionAsync(r,a,o,i,u)]}case"Where":{const r=s.cast(Xi("condition",e,t,n),"bool"),a=[await s.whereAsync(r)];return r.dispose(),a}case"ListDiff":return s.setdiff1dAsync(Xi("x",e,t,n),Xi("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n);case"evaluation":return s((()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:T;switch(e.op){case"LowerBound":{const s=Xi("sortedSequence",e,t,n),a=Xi("values",e,t,n);return[r.lowerBound(s,a)]}case"TopKV2":{const s=Xi("x",e,t,n),a=Xi("k",e,t,n),o=Xi("sorted",e,t,n),i=r.topk(s,a,o);return[i.values,i.indices]}case"UpperBound":{const s=Xi("sortedSequence",e,t,n),a=Xi("values",e,t,n);return[r.upperBound(s,a)]}case"Unique":{const s=Xi("x",e,t,n),a=r.unique(s);return[a.values,a.indices]}case"UniqueV2":{const s=Xi("x",e,t,n),a=Xi("axis",e,t,n),o=r.unique(s,a);return[o.values,o.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"image":return s((()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:T;switch(e.op){case"ResizeBilinear":{const s=Xi("images",e,t,n),a=Xi("size",e,t,n),o=Xi("alignCorners",e,t,n),i=Xi("halfPixelCenters",e,t,n);return[r.image.resizeBilinear(s,[a[0],a[1]],o,i)]}case"ResizeNearestNeighbor":{const s=Xi("images",e,t,n),a=Xi("size",e,t,n),o=Xi("alignCorners",e,t,n),i=Xi("halfPixelCenters",e,t,n);return[r.image.resizeNearestNeighbor(s,[a[0],a[1]],o,i)]}case"CropAndResize":{const s=Xi("image",e,t,n),a=Xi("boxes",e,t,n),o=Xi("boxInd",e,t,n),i=Xi("cropSize",e,t,n),u=Xi("method",e,t,n),l=Xi("extrapolationValue",e,t,n);return[r.image.cropAndResize(s,a,o,i,u,l)]}case"ImageProjectiveTransformV3":{const s=Xi("images",e,t,n),a=Xi("transforms",e,t,n),o=Xi("outputShape",e,t,n),i=Xi("fillValue",e,t,n),u=Xi("interpolation",e,t,n),l=Xi("fillMode",e,t,n);return[r.image.transform(s,a,u.toLowerCase(),l.toLowerCase(),i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"graph":return s((()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:T;switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=Xi("default",e,t,n);return[eu(e.name,t,n)||s];case"Placeholder":return[eu(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[au(Xi("x",e,t,n))];case"IdentityN":return Xi("x",e,t,n).map((e=>au(e)));case"Shape":return[r.tensor1d(Xi("x",e,t,n).shape,"int32")];case"ShapeN":return Xi("x",e,t,n).map((e=>r.tensor1d(e.shape)));case"Size":return[r.scalar(Xi("x",e,t,n).size,"int32")];case"Rank":return[r.scalar(Xi("x",e,t,n).rank,"int32")];case"NoOp":return[r.scalar(1)];case"Print":const a=Xi("x",e,t,n),o=Xi("data",e,t,n),i=Xi("message",e,t,n),u=Xi("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<o.length;e++)console.log(Array.prototype.slice.call(o[e].dataSync()).slice(0,u));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"logical":return s((()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:T;switch(e.op){case"Equal":return[r.equal(Xi("a",e,t,n),Xi("b",e,t,n))];case"NotEqual":return[r.notEqual(Xi("a",e,t,n),Xi("b",e,t,n))];case"Greater":return[r.greater(Xi("a",e,t,n),Xi("b",e,t,n))];case"GreaterEqual":return[r.greaterEqual(Xi("a",e,t,n),Xi("b",e,t,n))];case"Less":return[r.less(Xi("a",e,t,n),Xi("b",e,t,n))];case"LessEqual":return[r.lessEqual(Xi("a",e,t,n),Xi("b",e,t,n))];case"LogicalAnd":return[r.logicalAnd(Xi("a",e,t,n),Xi("b",e,t,n))];case"LogicalNot":return[r.logicalNot(Xi("a",e,t,n))];case"LogicalOr":return[r.logicalOr(Xi("a",e,t,n),Xi("b",e,t,n))];case"Select":case"SelectV2":return[r.where(Xi("condition",e,t,n),Xi("a",e,t,n),Xi("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"matrices":return s((()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:T;switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[r.matMul(Xi("a",e,t,n),Xi("b",e,t,n),Xi("transposeA",e,t,n),Xi("transposeB",e,t,n))];case"Einsum":return[r.einsum(Xi("equation",e,t,n),...Xi("tensors",e,t,n))];case"Transpose":return[r.transpose(Xi("x",e,t,n),Xi("perm",e,t,n))];case"_FusedMatMul":const[s,a]=Xi("fusedOps",e,t,n),o="biasadd"===s,i="prelu"===a,u=Xi("numArgs",e,t,n),l=Xi("leakyreluAlpha",e,t,n);if(o){if(i&&2!==u)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==u)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[p,c]=Xi("args",e,t,n);return[r.fused.matMul({a:Xi("a",e,t,n),b:Xi("b",e,t,n),transposeA:Xi("transposeA",e,t,n),transposeB:Xi("transposeB",e,t,n),bias:p,activation:a,preluActivationWeights:c,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"normalization":return s((()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:T;switch(e.op){case"EuclideanNorm":return[r.euclideanNorm(Xi("x",e,t,n),Xi("axis",e,t,n),Xi("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[r.batchNorm(Xi("x",e,t,n),Xi("mean",e,t,n),Xi("variance",e,t,n),Xi("offset",e,t,n),Xi("scale",e,t,n),Xi("epsilon",e,t,n))];case"LRN":return[r.localResponseNormalization(Xi("x",e,t,n),Xi("radius",e,t,n),Xi("bias",e,t,n),Xi("alpha",e,t,n),Xi("beta",e,t,n))];case"Softmax":return[r.softmax(Xi("x",e,t,n))];case"LogSoftmax":return[r.logSoftmax(Xi("x",e,t,n))];case"SparseToDense":return[r.sparseToDense(Xi("sparseIndices",e,t,n),Xi("outputShape",e,t,n),Xi("sparseValues",e,t,n),Xi("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"reduction":return s((()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:T;switch(e.op){case"Max":{const s=Xi("axis",e,t,n),a=Xi("keepDims",e,t,n);return[r.max(Xi("x",e,t,n),s,a)]}case"Mean":{const s=Xi("axis",e,t,n),a=Xi("keepDims",e,t,n);return[r.mean(Xi("x",e,t,n),s,a)]}case"Min":{const s=Xi("axis",e,t,n),a=Xi("keepDims",e,t,n);return[r.min(Xi("x",e,t,n),s,a)]}case"Sum":{const s=Xi("axis",e,t,n),a=Xi("keepDims",e,t,n);return[r.sum(Xi("x",e,t,n),s,a)]}case"All":{const s=Xi("axis",e,t,n),a=Xi("keepDims",e,t,n);return[r.all(Xi("x",e,t,n),s,a)]}case"Any":{const s=Xi("axis",e,t,n),a=Xi("keepDims",e,t,n);return[r.any(Xi("x",e,t,n),s,a)]}case"ArgMax":{const s=Xi("axis",e,t,n);return[r.argMax(Xi("x",e,t,n),s)]}case"ArgMin":{const s=Xi("axis",e,t,n);return[r.argMin(Xi("x",e,t,n),s)]}case"Prod":{const s=Xi("axis",e,t,n),a=Xi("keepDims",e,t,n);return[r.prod(Xi("x",e,t,n),s,a)]}case"Cumprod":{const s=Xi("axis",e,t,n),a=Xi("exclusive",e,t,n),o=Xi("reverse",e,t,n);return[r.cumprod(Xi("x",e,t,n),s,a,o)]}case"Cumsum":{const s=Xi("axis",e,t,n),a=Xi("exclusive",e,t,n),o=Xi("reverse",e,t,n);return[r.cumsum(Xi("x",e,t,n),s,a,o)]}case"Bincount":const s=Xi("x",e,t,n),a=Xi("weights",e,t,n),o=Xi("size",e,t,n);return[r.bincount(s,a,o)];case"DenseBincount":{const s=Xi("x",e,t,n),a=Xi("weights",e,t,n),o=Xi("size",e,t,n),i=Xi("binaryOutput",e,t,n);return[r.denseBincount(s,a,o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"slice_join":return s((()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:T;switch(e.op){case"ConcatV2":case"Concat":{const s=Xi("n",e,t,n),a=Xi("axis",e,t,n);let o=Xi("tensors",e,t,n);return o=o.slice(0,s),[r.concat(o,a)]}case"Gather":{const s=Xi("x",e,t,n),a=Xi("indices",e,t,n);return[r.gather(s,r.cast(a,"int32"),0)]}case"GatherV2":{const s=Xi("axis",e,t,n),a=Xi("batchDims",e,t,n),o=Xi("x",e,t,n),i=Xi("indices",e,t,n);return[r.gather(o,r.cast(i,"int32"),s,a)]}case"Reverse":{const s=Xi("dims",e,t,n),a=[];for(let e=0;e<s.length;e++)s[e]&&a.push(e);const o=Xi("x",e,t,n);return[r.reverse(o,a)]}case"ReverseV2":{const s=Xi("axis",e,t,n),a=Xi("x",e,t,n);return[r.reverse(a,s)]}case"Slice":{const s=Xi("begin",e,t,n),a=Xi("size",e,t,n);return[r.slice(Xi("x",e,t,n),s,a)]}case"StridedSlice":{const s=Xi("begin",e,t,n),a=Xi("end",e,t,n),o=Xi("strides",e,t,n),i=Xi("beginMask",e,t,n),u=Xi("endMask",e,t,n),l=Xi("ellipsisMask",e,t,n),p=Xi("newAxisMask",e,t,n),c=Xi("shrinkAxisMask",e,t,n),d=Xi("x",e,t,n);return[r.stridedSlice(d,s,a,o,i,u,l,p,c)]}case"Pack":return Io((()=>{const s=Xi("axis",e,t,n),a=Xi("tensors",e,t,n),o=a[0].shape,i=r.squeeze(a[0]).shape,u=a.map((e=>{const t=O(e.shape,o);if(!t&&!O(r.squeeze(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:r.reshape(e,o)}));return[r.stack(u,s)]}));case"Unpack":{const s=Xi("axis",e,t,n),a=Xi("tensor",e,t,n);return r.unstack(a,s)}case"Tile":{const s=Xi("reps",e,t,n);return[r.tile(Xi("x",e,t,n),s)]}case"Split":case"SplitV":{const s=Xi("axis",e,t,n),a=Xi("numOrSizeSplits",e,t,n),o=Xi("x",e,t,n);return r.split(o,a,s)}case"ScatterNd":{const s=Xi("indices",e,t,n),a=Xi("values",e,t,n),o=Xi("shape",e,t,n);return[r.scatterND(s,a,o)]}case"GatherNd":{const s=Xi("x",e,t,n),a=Xi("indices",e,t,n);return[r.gatherND(s,a)]}case"SparseToDense":{const s=Xi("sparseIndices",e,t,n),a=Xi("outputShape",e,t,n),o=Xi("sparseValues",e,t,n),i=Xi("defaultValue",e,t,n);return[r.sparseToDense(s,o,a,o.dtype===i.dtype?i:r.cast(i,o.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"sparse":return s((()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:T;switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:s,outputValues:a,emptyRowIndicator:o,reverseIndexMap:i}=r.sparse.sparseFillEmptyRows(Xi("indices",e,t,n),Xi("values",e,t,n),Xi("denseShape",e,t,n),Xi("defaultValue",e,t,n));return[s,a,o,i]}case"SparseReshape":{const{outputIndices:s,outputShape:a}=r.sparse.sparseReshape(Xi("inputIndices",e,t,n),Xi("inputShape",e,t,n),Xi("newShape",e,t,n));return[s,a]}case"SparseSegmentMean":return[r.sparse.sparseSegmentMean(Xi("data",e,t,n),Xi("indices",e,t,n),Xi("segmentIds",e,t,n))];case"SparseSegmentSum":return[r.sparse.sparseSegmentSum(Xi("data",e,t,n),Xi("indices",e,t,n),Xi("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"spectral":return s((()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:T;switch(e.op){case"FFT":return[r.fft(Xi("x",e,t,n))];case"IFFT":return[r.ifft(Xi("x",e,t,n))];case"RFFT":return[r.rfft(Xi("x",e,t,n))];case"IRFFT":return[r.irfft(Xi("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"string":return s((()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:T;switch(e.op){case"StringNGrams":{const{nGrams:s,nGramsSplits:a}=r.string.stringNGrams(Xi("data",e,t,n),Xi("dataSplits",e,t,n),Xi("separator",e,t,n),Xi("nGramWidths",e,t,n),Xi("leftPad",e,t,n),Xi("rightPad",e,t,n),Xi("padWidth",e,t,n),Xi("preserveShortSequences",e,t,n));return[s,a]}case"StringSplit":{const{indices:s,values:a,shape:o}=r.string.stringSplit(Xi("input",e,t,n),Xi("delimiter",e,t,n),Xi("skipEmpty",e,t,n));return[s,a,o]}case"StringToHashBucketFast":return[r.string.stringToHashBucketFast(Xi("input",e,t,n),Xi("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"transformation":return s((()=>function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:T;switch(e.op){case"Cast":return[r.cast(Xi("x",e,t,n),Xi("dtype",e,t,n))];case"ExpandDims":{const s=Xi("axis",e,t,n);return[r.expandDims(Xi("x",e,t,n),s)]}case"Squeeze":{const s=Xi("axis",e,t,n);return[r.squeeze(Xi("x",e,t,n),s)]}case"Reshape":return[r.reshape(Xi("x",e,t,n),Xi("shape",e,t,n))];case"MirrorPad":return[r.mirrorPad(Xi("x",e,t,n),Xi("padding",e,t,n),Xi("mode",e,t,n))];case"PadV2":case"Pad":return[r.pad(Xi("x",e,t,n),Xi("padding",e,t,n),Xi("constantValue",e,t,n))];case"SpaceToBatchND":{const s=Xi("blockShape",e,t,n),a=Xi("paddings",e,t,n);return[r.spaceToBatchND(Xi("x",e,t,n),s,a)]}case"BatchToSpaceND":{const s=Xi("blockShape",e,t,n),a=Xi("crops",e,t,n);return[r.batchToSpaceND(Xi("x",e,t,n),s,a)]}case"DepthToSpace":{const s=Xi("blockSize",e,t,n),a=Xi("dataFormat",e,t,n).toUpperCase();return[r.depthToSpace(Xi("x",e,t,n),s,a)]}case"BroadcastTo":return[r.broadcastTo(Xi("x",e,t,n),Xi("shape",e,t,n))];case"BroadcastArgs":return[r.broadcastArgs(Xi("s0",e,t,n),Xi("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}}(e,t,n)));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const s=Xi("keyDType",e,t,n),a=Xi("valueDType",e,t,n),o=new Yu(s,a);return r.addHashTable(e.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const s=Xi("tableHandle",e,t,n,r),a=Xi("keys",e,t,n),o=Xi("values",e,t,n),i=r.getHashTableById(s.id);return[await i.import(a,o)]}case"LookupTableFind":case"LookupTableFindV2":{const s=Xi("tableHandle",e,t,n,r),a=Xi("keys",e,t,n),o=Xi("defaultValue",e,t,n),i=r.getHashTableById(s.id);return[await i.find(a,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const s=Xi("tableHandle",e,t,n,r);return[r.getHashTableById(s.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,r);case"custom":const a=Zi(e.op);if(a&&a.customExecutor)return a.customExecutor(new Pu(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return j(a)?a.then((e=>[].concat(e))):[].concat(a)}class Zu{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function Xu(e,t,n,r){const s=new Set,a=[];let o=null,i=null;const u=new Set,l=Object.keys(e).map((e=>ru(e)[0]));let p=[];null!=r&&(p=r.map((e=>ru(e.name)[0])));const c=[...t];for(;c.length>0;){const e=c.pop();(rl(e)||sl(e)||al(e))&&null==o&&(o=e,i=o.children.map((e=>e.name)).filter((e=>s.has(e)))),s.add(e.name),null==n[e.name]&&(-1===l.indexOf(e.name)&&-1===p.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{u.has(e.name)||(u.add(e.name),c.push(e))})):a.push(e.name)))}return{inputs:e,outputs:t,usedNodes:s,missingInputs:a,dynamicNode:o,syncInputs:i}}const el=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],tl=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],nl=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function rl(e){return el.indexOf(e.op)>=0}function sl(e){return tl.indexOf(e.op)>=0}function al(e){return nl.indexOf(e.op)>=0}class ol{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new ol(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),r=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=Xu(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=t.map((e=>e.name)),s=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return function(e,t,n){const{usedNodes:r,inputs:s}=n,a=[],o=Object.keys(s).map((e=>ru(e)[0])).map((t=>e.nodes[t])),i=e.initNodes;o.forEach((e=>{r.has(e.name)&&a.push(e)})),e.weights.forEach((e=>{r.has(e.name)&&a.push(e)})),null!=i&&i.forEach((e=>{r.has(e.name)&&a.push(e)}));const u=new Set,l=[];for(;a.length>0;){const e=a.pop();u.add(e.name),t[e.name]||l.push(e),e.children.forEach((e=>{!u.has(e.name)&&r.has(e.name)&&e.inputs.every((e=>u.has(e.name)))&&a.push(e)}))}return l}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map((e=>this.graph.nodes[ru(e)[0]])),s=t.map((e=>ru(e)[0]));let a=s.map((e=>this.graph.nodes[e]));this.resetIntermediateTensors(),0===a.length&&(a=this._outputs);const o=this.getCompilationKey(r,a);let i=this.compiledMap.get(o);null==i&&(i=this.compile(e,a),this.compiledMap.set(o,i));const u={},l={};return Io((()=>{const n=new Zu(this.weightMap,u,l,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=ru(t),a=[];a[s]=e[t],r[n]=a}));const a=this.getFrozenTensorIds(r),o={};for(let e=0;e<i.length;e++){const t=i[e];if(!r[t.name]){const e=Qu(t,r,n,this._resourceManager);if(j(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);r[t.name]=e,this.checkTensorForDisposal(t.name,t,r,n,a,s,o)}}return null==this.parent&&n.dispose(a),t.map((e=>eu(e,r,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,r,s,a,o){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const a=function(e,t,n){return t[nu(e,n.currentContextId)]}(e.name,n,r);null!=a&&a.forEach((e=>{if(e&&!e.kept&&!s.has(e.id)){const n=o[e.id];if(1===n){if(this.keepTensorForDebug){const[n,s]=tu(t.name,r);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][s]=e}else e.dispose();delete o[e.id]}else null!=n&&o[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach((e=>this.intermediateTensors[e].forEach((e=>e.dispose())))),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach((e=>{this.tensorsMap[e].forEach((e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()}))}))}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const e in this.intermediateTensors)this.intermediateTensors[e].forEach((e=>e.dispose())),delete this.intermediateTensors[e]}async _executeAsync(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{};n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=Q().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(l){console.warn(l.message)}this.resetIntermediateTensors();const a=new Zu(this.weightMap,r,s,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,a,t,n);const o=t.map((e=>eu(e,this.tensorsMap,a))),i=o.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id));return this.keepIds=new Set([...i,...u,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&a.dispose(this.keepIds),o}async executeFunctionAsync(e,t,n){const r=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const s=Object.keys(e),a=s.map((e=>this.graph.nodes[ru(e)[0]])),o=n.map((e=>ru(e)[0]));let i=o.map((e=>this.graph.nodes[e]));0===i.length&&(i=this._outputs);const{usedNodes:u,missingInputs:l,dynamicNode:p,syncInputs:c}=Xu(e,i,this.weightMap,this._initNodes),d=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),h=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=ru(t),s=[];s[r]=e[t],h[n]=s}));const m={},f=this.getFrozenTensorIds(h),g={};for(;d.length>0;){const e=this.processStack(a,d,t,h,g,f,o,m,u);await Promise.all(e)}null!=p||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=i.filter((e=>!rl(e)&&!eu(e.name,h,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=p&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${c}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${s}]. Consider providing the following inputs: [${l}]. ${e}`)}return h}processStack(e,t,n,r,s,a,o,i,u){const l=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let p="";if("Enter"===e.node.op&&Xi("isConstant",e.node,r,n)&&([p]=tu(e.node.name,n)),null==r[e.node.name]){const c=Qu(e.node,r,n,this._resourceManager);p||([p]=tu(e.node.name,n));const d=n.currentContext;j(c)?l.push(c.then((l=>(r[p]=l,n.currentContext=d,this.checkTensorForDisposal(p,e.node,r,n,a,o,i),this.processChildNodes(e.node,t,n,r,s,u),l)))):(r[p]=c,this.checkTensorForDisposal(p,e.node,r,n,a,o,i),this.processChildNodes(e.node,t,n,r,s,u))}else this.processChildNodes(e.node,t,n,r,s,u)}return l}processChildNodes(e,t,n,r,s,a){e.children.forEach((e=>{const[o]=tu(e.name,n);!s[o]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!eu(e,r,n)))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!eu(e,r,n)))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[r]=ru(t),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const e=s.attrParams.shape.value;_(e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t)),(()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}s.attrParams.dtype&&s.attrParams.dtype.value&&_(n.dtype===s.attrParams.dtype.value,(()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=ru(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=ru(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class il{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}const ul="?tfjs-format=file",ll="model.json";class pl{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:r;this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new il}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return j(e)?e.then((e=>this.loadSync(e))):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const r=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new ol(Su.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=Su.Instance.transformGraph(e.modelInitializer);this.initializer=new ol(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"===typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){const n=this.execute(e,this.outputNodes);if(this.structuredOutputKeys){const e={};return(n instanceof Be?[n]:n).forEach(((t,n)=>e[this.structuredOutputKeys[n]]=t)),e}return n}normalizeInputs(e){if(!(e instanceof Be)&&!Array.isArray(e))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,r)=>(t[n]=e[r],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function cl(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:r;if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"===typeof e&&(e=function(e){e.endsWith("/")||(e+="/");return`${e}${ll}${ul}`}(e));const s=new pl(e,t,n);return await s.load(),s}function dl(e,t,n,r){return new(n||(n=Promise))((function(s,a){function o(e){try{u(r.next(e))}catch(e){a(e)}}function i(e){try{u(r.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,i)}u((r=r.apply(e,t||[])).next())}))}function hl(e,t){var n,r,s,a,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return a={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(a){return function(i){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(s=(s=o.trys).length>0&&s[s.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){o.label=a[1];break}if(6===a[0]&&o.label<s[1]){o.label=s[1],s=a;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(a);break}s[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,i])}}}var ml=function(e){for(var t=[],n=0,r=e;n<r.length;n++){var s=r[n];t.push(s)}return t},fl=function(){this.parent=null,this.children={},this.end=!1,this.word=[[],0,0]},gl=function(){function e(){this.root=new fl}return e.prototype.insert=function(e,t,n){for(var r=this.root,s=ml(e),a=0;a<s.length;a++)r.children[s[a]]||(r.children[s[a]]=new fl,r.children[s[a]].parent=r,r.children[s[a]].word[0]=r.word[0].concat(s[a])),r=r.children[s[a]],a===s.length-1&&(r.end=!0,r.word[1]=t,r.word[2]=n)},e.prototype.commonPrefixSearch=function(e){for(var t=[],n=this.root.children[e[0]],r=0;r<e.length&&n;r++)n.end&&t.push(n.word),n=n.children[e[r+1]];return t.length||t.push([[e[0]],0,0]),t},e}();var yl=function(){function e(e,t){void 0===t&&(t=6),this.vocabulary=e,this.reservedSymbolsCount=t,this.trie=new gl;for(var n=this.reservedSymbolsCount;n<this.vocabulary.length;n++)this.trie.insert(this.vocabulary[n][0],this.vocabulary[n][1],n)}return e.prototype.encode=function(e){var t=[],n=[],r=[];e=function(e){var t=e.normalize("NFKC");return t.length>0?"\u2581"+t.replace(/ /g,"\u2581"):t}(e);for(var s=ml(e),a=0;a<=s.length;a++)t.push({}),n.push(0),r.push(0);for(a=0;a<s.length;a++)for(var o=this.trie.commonPrefixSearch(s.slice(a)),i=0;i<o.length;i++){var u=o[i],l={key:u[0],score:u[1],index:u[2]};null==t[a+(p=u[0].length)][a]&&(t[a+p][a]=[]),t[a+p][a].push(l)}for(var p=0;p<=s.length;p++)for(var c in t[p]){var d=t[p][c];for(i=0;i<d.length;i++){var h=d[i],m=h.score+r[p-h.key.length];(0===r[p]||m>=r[p])&&(r[p]=m,n[p]=d[i].index)}}for(var f=[],g=n.length-1;g>0;)f.push(n[g]),g-=this.vocabulary[n[g]][0].length;var y=[],b=!1;for(a=0;a<f.length;a++){var w=f[a];b&&0===w||y.push(w),b=0===w}return y.reverse()},e}();function bl(e){return dl(this,void 0,void 0,(function(){var t;return hl(this,(function(n){switch(n.label){case 0:return[4,wl(e)];case 1:return t=n.sent(),[2,new yl(t)]}}))}))}function wl(e){return dl(this,void 0,void 0,(function(){return hl(this,(function(t){switch(t.label){case 0:return[4,(n=e,Q().platform.fetch(n,r))];case 1:return[2,t.sent().json()]}var n,r}))}))}var Nl="1.3.3",vl="https://tfhub.dev/google/tfjs-model/universal-sentence-encoder-qa-ondevice/1",xl=[0,1,2],kl=192;function Tl(){return dl(this,void 0,void 0,(function(){var e;return hl(this,(function(t){switch(t.label){case 0:return[4,(e=new Sl).load()];case 1:return t.sent(),[2,e]}}))}))}var Sl=function(){function e(){}return e.prototype.loadModel=function(){return dl(this,void 0,void 0,(function(){return hl(this,(function(e){return[2,cl(vl,{fromTFHub:!0})]}))}))},e.prototype.load=function(){return dl(this,void 0,void 0,(function(){var e,t,n;return hl(this,(function(r){switch(r.label){case 0:return[4,Promise.all([this.loadModel(),wl(vl+"/vocab.json?tfjs-format=file")])];case 1:return e=r.sent(),t=e[0],n=e[1],this.model=t,this.tokenizer=new yl(n,3),[2]}}))}))},e.prototype.embed=function(e){var t=this,n=Io((function(){var n=t.tokenizeStrings(e.queries,kl),r=t.tokenizeStrings(e.responses,kl);if(null!=e.contexts&&e.contexts.length!==e.responses.length)throw new Error("The length of response strings and context strings need to match.");var s=e.contexts||[];null==e.contexts&&(s.length=e.responses.length,s.fill(""));var a=t.tokenizeStrings(s,kl),o={};return o.input_inp_text=n,o.input_res_text=r,o.input_res_context=a,t.model.execute(o,["Final/EncodeQuery/mul","Final/EncodeResult/mul"])}));return{queryEmbedding:n[0],responseEmbedding:n[1]}},e.prototype.tokenizeStrings=function(e,t){var n=this;return mo(e.map((function(e){return n.shiftTokens(n.tokenizer.encode(e),kl)})),[e.length,kl],"int32")},e.prototype.shiftTokens=function(e,t){e.unshift(1);for(var n=0;n<t;n++)n>=e.length?e[n]=2:xl.includes(e[n])||(e[n]+=3);return e.slice(0,t)},e}();function El(e){return dl(this,void 0,void 0,(function(){var t;return hl(this,(function(n){switch(n.label){case 0:return[4,(t=new _l).load(e)];case 1:return n.sent(),[2,t]}}))}))}var _l=function(){function e(){}return e.prototype.loadModel=function(e){return dl(this,void 0,void 0,(function(){return hl(this,(function(t){return[2,e?cl(e):cl("https://tfhub.dev/tensorflow/tfjs-model/universal-sentence-encoder-lite/1/default/1",{fromTFHub:!0})]}))}))},e.prototype.load=function(e){return void 0===e&&(e={}),dl(this,void 0,void 0,(function(){var t,n,r;return hl(this,(function(s){switch(s.label){case 0:return[4,Promise.all([this.loadModel(e.modelUrl),wl(e.vocabUrl||"https://storage.googleapis.com/tfjs-models/savedmodel/universal_sentence_encoder/vocab.json")])];case 1:return t=s.sent(),n=t[0],r=t[1],this.model=n,this.tokenizer=new yl(r),[2]}}))}))},e.prototype.embed=function(e){return dl(this,void 0,void 0,(function(){var t,n,r,s,a,o,i,u,l=this;return hl(this,(function(p){switch(p.label){case 0:for("string"==typeof e&&(e=[e]),t=e.map((function(e){return l.tokenizer.encode(e)})),n=t.map((function(e,t){return e.map((function(e,n){return[t,n]}))})),r=[],s=0;s<n.length;s++)r=r.concat(n[s]);return a=mo(r,[r.length,2],"int32"),o=ho(A(t),"int32"),i={indices:a,values:o},[4,this.model.executeAsync(i)];case 1:return u=p.sent(),a.dispose(),o.dispose(),[2,u]}}))}))},e}()}}]);
//# sourceMappingURL=128.03ce2271.chunk.js.map